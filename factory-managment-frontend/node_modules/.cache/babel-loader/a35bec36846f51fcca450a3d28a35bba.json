{"ast":null,"code":"import compareAsc from \"../compareAsc/index.js\";\nimport differenceInMonths from \"../differenceInMonths/index.js\";\nimport differenceInSeconds from \"../differenceInSeconds/index.js\";\nimport defaultLocale from \"../locale/en-US/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport cloneObject from \"../_lib/cloneObject/index.js\";\nimport getTimezoneOffsetInMilliseconds from \"../_lib/getTimezoneOffsetInMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nvar MINUTES_IN_DAY = 1440;\nvar MINUTES_IN_ALMOST_TWO_DAYS = 2520;\nvar MINUTES_IN_MONTH = 43200;\nvar MINUTES_IN_TWO_MONTHS = 86400;\n/**\r\n * @name formatDistance\r\n * @category Common Helpers\r\n * @summary Return the distance between the given dates in words.\r\n *\r\n * @description\r\n * Return the distance between the given dates in words.\r\n *\r\n * | Distance between dates                                            | Result              |\r\n * |-------------------------------------------------------------------|---------------------|\r\n * | 0 ... 30 secs                                                     | less than a minute  |\r\n * | 30 secs ... 1 min 30 secs                                         | 1 minute            |\r\n * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |\r\n * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |\r\n * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |\r\n * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |\r\n * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |\r\n * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |\r\n * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |\r\n * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |\r\n * | 1 yr ... 1 yr 3 months                                            | about 1 year        |\r\n * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |\r\n * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |\r\n * | N yrs ... N yrs 3 months                                          | about N years       |\r\n * | N yrs 3 months ... N yrs 9 months                                 | over N years        |\r\n * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |\r\n *\r\n * With `options.includeSeconds == true`:\r\n * | Distance between dates | Result               |\r\n * |------------------------|----------------------|\r\n * | 0 secs ... 5 secs      | less than 5 seconds  |\r\n * | 5 secs ... 10 secs     | less than 10 seconds |\r\n * | 10 secs ... 20 secs    | less than 20 seconds |\r\n * | 20 secs ... 40 secs    | half a minute        |\r\n * | 40 secs ... 60 secs    | less than a minute   |\r\n * | 60 secs ... 90 secs    | 1 minute             |\r\n *\r\n * ### v2.0.0 breaking changes:\r\n *\r\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\r\n *\r\n * - The function was renamed from `distanceInWords ` to `formatDistance`\r\n *   to make its name consistent with `format` and `formatRelative`.\r\n *\r\n * - The order of arguments is swapped to make the function\r\n *   consistent with `differenceIn...` functions.\r\n *\r\n *   ```javascript\r\n *   // Before v2.0.0\r\n *\r\n *   distanceInWords(\r\n *     new Date(1986, 3, 4, 10, 32, 0),\r\n *     new Date(1986, 3, 4, 11, 32, 0),\r\n *     { addSuffix: true }\r\n *   ) //=> 'in about 1 hour'\r\n *\r\n *   // v2.0.0 onward\r\n *\r\n *   formatDistance(\r\n *     new Date(1986, 3, 4, 11, 32, 0),\r\n *     new Date(1986, 3, 4, 10, 32, 0),\r\n *     { addSuffix: true }\r\n *   ) //=> 'in about 1 hour'\r\n *   ```\r\n *\r\n * @param {Date|Number} date - the date\r\n * @param {Date|Number} baseDate - the date to compare with\r\n * @param {Object} [options] - an object with options.\r\n * @param {Boolean} [options.includeSeconds=false] - distances less than a minute are more detailed\r\n * @param {Boolean} [options.addSuffix=false] - result indicates if the second date is earlier or later than the first\r\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\r\n * @returns {String} the distance in words\r\n * @throws {TypeError} 2 arguments required\r\n * @throws {RangeError} `date` must not be Invalid Date\r\n * @throws {RangeError} `baseDate` must not be Invalid Date\r\n * @throws {RangeError} `options.locale` must contain `formatDistance` property\r\n *\r\n * @example\r\n * // What is the distance between 2 July 2014 and 1 January 2015?\r\n * const result = formatDistance(new Date(2014, 6, 2), new Date(2015, 0, 1))\r\n * //=> '6 months'\r\n *\r\n * @example\r\n * // What is the distance between 1 January 2015 00:00:15\r\n * // and 1 January 2015 00:00:00, including seconds?\r\n * const result = formatDistance(\r\n *   new Date(2015, 0, 1, 0, 0, 15),\r\n *   new Date(2015, 0, 1, 0, 0, 0),\r\n *   { includeSeconds: true }\r\n * )\r\n * //=> 'less than 20 seconds'\r\n *\r\n * @example\r\n * // What is the distance from 1 January 2016\r\n * // to 1 January 2015, with a suffix?\r\n * const result = formatDistance(new Date(2015, 0, 1), new Date(2016, 0, 1), {\r\n *   addSuffix: true\r\n * })\r\n * //=> 'about 1 year ago'\r\n *\r\n * @example\r\n * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?\r\n * import { eoLocale } from 'date-fns/locale/eo'\r\n * const result = formatDistance(new Date(2016, 7, 1), new Date(2015, 0, 1), {\r\n *   locale: eoLocale\r\n * })\r\n * //=> 'pli ol 1 jaro'\r\n */\n\nexport default function formatDistance(dirtyDate, dirtyBaseDate) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  requiredArgs(2, arguments);\n  var locale = options.locale || defaultLocale;\n\n  if (!locale.formatDistance) {\n    throw new RangeError('locale must contain formatDistance property');\n  }\n\n  var comparison = compareAsc(dirtyDate, dirtyBaseDate);\n\n  if (isNaN(comparison)) {\n    throw new RangeError('Invalid time value');\n  }\n\n  var localizeOptions = cloneObject(options);\n  localizeOptions.addSuffix = Boolean(options.addSuffix);\n  localizeOptions.comparison = comparison;\n  var dateLeft;\n  var dateRight;\n\n  if (comparison > 0) {\n    dateLeft = toDate(dirtyBaseDate);\n    dateRight = toDate(dirtyDate);\n  } else {\n    dateLeft = toDate(dirtyDate);\n    dateRight = toDate(dirtyBaseDate);\n  }\n\n  var seconds = differenceInSeconds(dateRight, dateLeft);\n  var offsetInSeconds = (getTimezoneOffsetInMilliseconds(dateRight) - getTimezoneOffsetInMilliseconds(dateLeft)) / 1000;\n  var minutes = Math.round((seconds - offsetInSeconds) / 60);\n  var months; // 0 up to 2 mins\n\n  if (minutes < 2) {\n    if (options.includeSeconds) {\n      if (seconds < 5) {\n        return locale.formatDistance('lessThanXSeconds', 5, localizeOptions);\n      } else if (seconds < 10) {\n        return locale.formatDistance('lessThanXSeconds', 10, localizeOptions);\n      } else if (seconds < 20) {\n        return locale.formatDistance('lessThanXSeconds', 20, localizeOptions);\n      } else if (seconds < 40) {\n        return locale.formatDistance('halfAMinute', null, localizeOptions);\n      } else if (seconds < 60) {\n        return locale.formatDistance('lessThanXMinutes', 1, localizeOptions);\n      } else {\n        return locale.formatDistance('xMinutes', 1, localizeOptions);\n      }\n    } else {\n      if (minutes === 0) {\n        return locale.formatDistance('lessThanXMinutes', 1, localizeOptions);\n      } else {\n        return locale.formatDistance('xMinutes', minutes, localizeOptions);\n      }\n    } // 2 mins up to 0.75 hrs\n\n  } else if (minutes < 45) {\n    return locale.formatDistance('xMinutes', minutes, localizeOptions); // 0.75 hrs up to 1.5 hrs\n  } else if (minutes < 90) {\n    return locale.formatDistance('aboutXHours', 1, localizeOptions); // 1.5 hrs up to 24 hrs\n  } else if (minutes < MINUTES_IN_DAY) {\n    var hours = Math.round(minutes / 60);\n    return locale.formatDistance('aboutXHours', hours, localizeOptions); // 1 day up to 1.75 days\n  } else if (minutes < MINUTES_IN_ALMOST_TWO_DAYS) {\n    return locale.formatDistance('xDays', 1, localizeOptions); // 1.75 days up to 30 days\n  } else if (minutes < MINUTES_IN_MONTH) {\n    var days = Math.round(minutes / MINUTES_IN_DAY);\n    return locale.formatDistance('xDays', days, localizeOptions); // 1 month up to 2 months\n  } else if (minutes < MINUTES_IN_TWO_MONTHS) {\n    months = Math.round(minutes / MINUTES_IN_MONTH);\n    return locale.formatDistance('aboutXMonths', months, localizeOptions);\n  }\n\n  months = differenceInMonths(dateRight, dateLeft); // 2 months up to 12 months\n\n  if (months < 12) {\n    var nearestMonth = Math.round(minutes / MINUTES_IN_MONTH);\n    return locale.formatDistance('xMonths', nearestMonth, localizeOptions); // 1 year up to max Date\n  } else {\n    var monthsSinceStartOfYear = months % 12;\n    var years = Math.floor(months / 12); // N years up to 1 years 3 months\n\n    if (monthsSinceStartOfYear < 3) {\n      return locale.formatDistance('aboutXYears', years, localizeOptions); // N years 3 months up to N years 9 months\n    } else if (monthsSinceStartOfYear < 9) {\n      return locale.formatDistance('overXYears', years, localizeOptions); // N years 9 months up to N year 12 months\n    } else {\n      return locale.formatDistance('almostXYears', years + 1, localizeOptions);\n    }\n  }\n}","map":{"version":3,"sources":["C:/Users/thero/OneDrive/Documents/factory-management/factory-management/factory-managment-frontend/node_modules/date-fns/esm/formatDistance/index.js"],"names":["compareAsc","differenceInMonths","differenceInSeconds","defaultLocale","toDate","cloneObject","getTimezoneOffsetInMilliseconds","requiredArgs","MINUTES_IN_DAY","MINUTES_IN_ALMOST_TWO_DAYS","MINUTES_IN_MONTH","MINUTES_IN_TWO_MONTHS","formatDistance","dirtyDate","dirtyBaseDate","options","arguments","length","undefined","locale","RangeError","comparison","isNaN","localizeOptions","addSuffix","Boolean","dateLeft","dateRight","seconds","offsetInSeconds","minutes","Math","round","months","includeSeconds","hours","days","nearestMonth","monthsSinceStartOfYear","years","floor"],"mappings":"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","sourcesContent":["import compareAsc from \"../compareAsc/index.js\";\r\nimport differenceInMonths from \"../differenceInMonths/index.js\";\r\nimport differenceInSeconds from \"../differenceInSeconds/index.js\";\r\nimport defaultLocale from \"../locale/en-US/index.js\";\r\nimport toDate from \"../toDate/index.js\";\r\nimport cloneObject from \"../_lib/cloneObject/index.js\";\r\nimport getTimezoneOffsetInMilliseconds from \"../_lib/getTimezoneOffsetInMilliseconds/index.js\";\r\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\r\nvar MINUTES_IN_DAY = 1440;\r\nvar MINUTES_IN_ALMOST_TWO_DAYS = 2520;\r\nvar MINUTES_IN_MONTH = 43200;\r\nvar MINUTES_IN_TWO_MONTHS = 86400;\r\n/**\r\n * @name formatDistance\r\n * @category Common Helpers\r\n * @summary Return the distance between the given dates in words.\r\n *\r\n * @description\r\n * Return the distance between the given dates in words.\r\n *\r\n * | Distance between dates                                            | Result              |\r\n * |-------------------------------------------------------------------|---------------------|\r\n * | 0 ... 30 secs                                                     | less than a minute  |\r\n * | 30 secs ... 1 min 30 secs                                         | 1 minute            |\r\n * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |\r\n * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |\r\n * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |\r\n * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |\r\n * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |\r\n * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |\r\n * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |\r\n * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |\r\n * | 1 yr ... 1 yr 3 months                                            | about 1 year        |\r\n * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |\r\n * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |\r\n * | N yrs ... N yrs 3 months                                          | about N years       |\r\n * | N yrs 3 months ... N yrs 9 months                                 | over N years        |\r\n * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |\r\n *\r\n * With `options.includeSeconds == true`:\r\n * | Distance between dates | Result               |\r\n * |------------------------|----------------------|\r\n * | 0 secs ... 5 secs      | less than 5 seconds  |\r\n * | 5 secs ... 10 secs     | less than 10 seconds |\r\n * | 10 secs ... 20 secs    | less than 20 seconds |\r\n * | 20 secs ... 40 secs    | half a minute        |\r\n * | 40 secs ... 60 secs    | less than a minute   |\r\n * | 60 secs ... 90 secs    | 1 minute             |\r\n *\r\n * ### v2.0.0 breaking changes:\r\n *\r\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\r\n *\r\n * - The function was renamed from `distanceInWords ` to `formatDistance`\r\n *   to make its name consistent with `format` and `formatRelative`.\r\n *\r\n * - The order of arguments is swapped to make the function\r\n *   consistent with `differenceIn...` functions.\r\n *\r\n *   ```javascript\r\n *   // Before v2.0.0\r\n *\r\n *   distanceInWords(\r\n *     new Date(1986, 3, 4, 10, 32, 0),\r\n *     new Date(1986, 3, 4, 11, 32, 0),\r\n *     { addSuffix: true }\r\n *   ) //=> 'in about 1 hour'\r\n *\r\n *   // v2.0.0 onward\r\n *\r\n *   formatDistance(\r\n *     new Date(1986, 3, 4, 11, 32, 0),\r\n *     new Date(1986, 3, 4, 10, 32, 0),\r\n *     { addSuffix: true }\r\n *   ) //=> 'in about 1 hour'\r\n *   ```\r\n *\r\n * @param {Date|Number} date - the date\r\n * @param {Date|Number} baseDate - the date to compare with\r\n * @param {Object} [options] - an object with options.\r\n * @param {Boolean} [options.includeSeconds=false] - distances less than a minute are more detailed\r\n * @param {Boolean} [options.addSuffix=false] - result indicates if the second date is earlier or later than the first\r\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\r\n * @returns {String} the distance in words\r\n * @throws {TypeError} 2 arguments required\r\n * @throws {RangeError} `date` must not be Invalid Date\r\n * @throws {RangeError} `baseDate` must not be Invalid Date\r\n * @throws {RangeError} `options.locale` must contain `formatDistance` property\r\n *\r\n * @example\r\n * // What is the distance between 2 July 2014 and 1 January 2015?\r\n * const result = formatDistance(new Date(2014, 6, 2), new Date(2015, 0, 1))\r\n * //=> '6 months'\r\n *\r\n * @example\r\n * // What is the distance between 1 January 2015 00:00:15\r\n * // and 1 January 2015 00:00:00, including seconds?\r\n * const result = formatDistance(\r\n *   new Date(2015, 0, 1, 0, 0, 15),\r\n *   new Date(2015, 0, 1, 0, 0, 0),\r\n *   { includeSeconds: true }\r\n * )\r\n * //=> 'less than 20 seconds'\r\n *\r\n * @example\r\n * // What is the distance from 1 January 2016\r\n * // to 1 January 2015, with a suffix?\r\n * const result = formatDistance(new Date(2015, 0, 1), new Date(2016, 0, 1), {\r\n *   addSuffix: true\r\n * })\r\n * //=> 'about 1 year ago'\r\n *\r\n * @example\r\n * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?\r\n * import { eoLocale } from 'date-fns/locale/eo'\r\n * const result = formatDistance(new Date(2016, 7, 1), new Date(2015, 0, 1), {\r\n *   locale: eoLocale\r\n * })\r\n * //=> 'pli ol 1 jaro'\r\n */\r\n\r\nexport default function formatDistance(dirtyDate, dirtyBaseDate) {\r\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\r\n  requiredArgs(2, arguments);\r\n  var locale = options.locale || defaultLocale;\r\n\r\n  if (!locale.formatDistance) {\r\n    throw new RangeError('locale must contain formatDistance property');\r\n  }\r\n\r\n  var comparison = compareAsc(dirtyDate, dirtyBaseDate);\r\n\r\n  if (isNaN(comparison)) {\r\n    throw new RangeError('Invalid time value');\r\n  }\r\n\r\n  var localizeOptions = cloneObject(options);\r\n  localizeOptions.addSuffix = Boolean(options.addSuffix);\r\n  localizeOptions.comparison = comparison;\r\n  var dateLeft;\r\n  var dateRight;\r\n\r\n  if (comparison > 0) {\r\n    dateLeft = toDate(dirtyBaseDate);\r\n    dateRight = toDate(dirtyDate);\r\n  } else {\r\n    dateLeft = toDate(dirtyDate);\r\n    dateRight = toDate(dirtyBaseDate);\r\n  }\r\n\r\n  var seconds = differenceInSeconds(dateRight, dateLeft);\r\n  var offsetInSeconds = (getTimezoneOffsetInMilliseconds(dateRight) - getTimezoneOffsetInMilliseconds(dateLeft)) / 1000;\r\n  var minutes = Math.round((seconds - offsetInSeconds) / 60);\r\n  var months; // 0 up to 2 mins\r\n\r\n  if (minutes < 2) {\r\n    if (options.includeSeconds) {\r\n      if (seconds < 5) {\r\n        return locale.formatDistance('lessThanXSeconds', 5, localizeOptions);\r\n      } else if (seconds < 10) {\r\n        return locale.formatDistance('lessThanXSeconds', 10, localizeOptions);\r\n      } else if (seconds < 20) {\r\n        return locale.formatDistance('lessThanXSeconds', 20, localizeOptions);\r\n      } else if (seconds < 40) {\r\n        return locale.formatDistance('halfAMinute', null, localizeOptions);\r\n      } else if (seconds < 60) {\r\n        return locale.formatDistance('lessThanXMinutes', 1, localizeOptions);\r\n      } else {\r\n        return locale.formatDistance('xMinutes', 1, localizeOptions);\r\n      }\r\n    } else {\r\n      if (minutes === 0) {\r\n        return locale.formatDistance('lessThanXMinutes', 1, localizeOptions);\r\n      } else {\r\n        return locale.formatDistance('xMinutes', minutes, localizeOptions);\r\n      }\r\n    } // 2 mins up to 0.75 hrs\r\n\r\n  } else if (minutes < 45) {\r\n    return locale.formatDistance('xMinutes', minutes, localizeOptions); // 0.75 hrs up to 1.5 hrs\r\n  } else if (minutes < 90) {\r\n    return locale.formatDistance('aboutXHours', 1, localizeOptions); // 1.5 hrs up to 24 hrs\r\n  } else if (minutes < MINUTES_IN_DAY) {\r\n    var hours = Math.round(minutes / 60);\r\n    return locale.formatDistance('aboutXHours', hours, localizeOptions); // 1 day up to 1.75 days\r\n  } else if (minutes < MINUTES_IN_ALMOST_TWO_DAYS) {\r\n    return locale.formatDistance('xDays', 1, localizeOptions); // 1.75 days up to 30 days\r\n  } else if (minutes < MINUTES_IN_MONTH) {\r\n    var days = Math.round(minutes / MINUTES_IN_DAY);\r\n    return locale.formatDistance('xDays', days, localizeOptions); // 1 month up to 2 months\r\n  } else if (minutes < MINUTES_IN_TWO_MONTHS) {\r\n    months = Math.round(minutes / MINUTES_IN_MONTH);\r\n    return locale.formatDistance('aboutXMonths', months, localizeOptions);\r\n  }\r\n\r\n  months = differenceInMonths(dateRight, dateLeft); // 2 months up to 12 months\r\n\r\n  if (months < 12) {\r\n    var nearestMonth = Math.round(minutes / MINUTES_IN_MONTH);\r\n    return locale.formatDistance('xMonths', nearestMonth, localizeOptions); // 1 year up to max Date\r\n  } else {\r\n    var monthsSinceStartOfYear = months % 12;\r\n    var years = Math.floor(months / 12); // N years up to 1 years 3 months\r\n\r\n    if (monthsSinceStartOfYear < 3) {\r\n      return locale.formatDistance('aboutXYears', years, localizeOptions); // N years 3 months up to N years 9 months\r\n    } else if (monthsSinceStartOfYear < 9) {\r\n      return locale.formatDistance('overXYears', years, localizeOptions); // N years 9 months up to N year 12 months\r\n    } else {\r\n      return locale.formatDistance('almostXYears', years + 1, localizeOptions);\r\n    }\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}