{"ast":null,"code":"import { default as polygonContains } from \"./polygonContains.js\";\nimport { default as distance } from \"./distance.js\";\nimport { epsilon2, radians } from \"./math.js\";\nvar containsObjectType = {\n  Feature: function (object, point) {\n    return containsGeometry(object.geometry, point);\n  },\n  FeatureCollection: function (object, point) {\n    var features = object.features,\n        i = -1,\n        n = features.length;\n\n    while (++i < n) if (containsGeometry(features[i].geometry, point)) return true;\n\n    return false;\n  }\n};\nvar containsGeometryType = {\n  Sphere: function () {\n    return true;\n  },\n  Point: function (object, point) {\n    return containsPoint(object.coordinates, point);\n  },\n  MultiPoint: function (object, point) {\n    var coordinates = object.coordinates,\n        i = -1,\n        n = coordinates.length;\n\n    while (++i < n) if (containsPoint(coordinates[i], point)) return true;\n\n    return false;\n  },\n  LineString: function (object, point) {\n    return containsLine(object.coordinates, point);\n  },\n  MultiLineString: function (object, point) {\n    var coordinates = object.coordinates,\n        i = -1,\n        n = coordinates.length;\n\n    while (++i < n) if (containsLine(coordinates[i], point)) return true;\n\n    return false;\n  },\n  Polygon: function (object, point) {\n    return containsPolygon(object.coordinates, point);\n  },\n  MultiPolygon: function (object, point) {\n    var coordinates = object.coordinates,\n        i = -1,\n        n = coordinates.length;\n\n    while (++i < n) if (containsPolygon(coordinates[i], point)) return true;\n\n    return false;\n  },\n  GeometryCollection: function (object, point) {\n    var geometries = object.geometries,\n        i = -1,\n        n = geometries.length;\n\n    while (++i < n) if (containsGeometry(geometries[i], point)) return true;\n\n    return false;\n  }\n};\n\nfunction containsGeometry(geometry, point) {\n  return geometry && containsGeometryType.hasOwnProperty(geometry.type) ? containsGeometryType[geometry.type](geometry, point) : false;\n}\n\nfunction containsPoint(coordinates, point) {\n  return distance(coordinates, point) === 0;\n}\n\nfunction containsLine(coordinates, point) {\n  var ao, bo, ab;\n\n  for (var i = 0, n = coordinates.length; i < n; i++) {\n    bo = distance(coordinates[i], point);\n    if (bo === 0) return true;\n\n    if (i > 0) {\n      ab = distance(coordinates[i], coordinates[i - 1]);\n      if (ab > 0 && ao <= ab && bo <= ab && (ao + bo - ab) * (1 - Math.pow((ao - bo) / ab, 2)) < epsilon2 * ab) return true;\n    }\n\n    ao = bo;\n  }\n\n  return false;\n}\n\nfunction containsPolygon(coordinates, point) {\n  return !!polygonContains(coordinates.map(ringRadians), pointRadians(point));\n}\n\nfunction ringRadians(ring) {\n  return ring = ring.map(pointRadians), ring.pop(), ring;\n}\n\nfunction pointRadians(point) {\n  return [point[0] * radians, point[1] * radians];\n}\n\nexport default function (object, point) {\n  return (object && containsObjectType.hasOwnProperty(object.type) ? containsObjectType[object.type] : containsGeometry)(object, point);\n}","map":{"version":3,"sources":["C:/Users/thero/OneDrive/Documents/factory-management/factory-management/factory-managment-frontend/node_modules/d3-geo/src/contains.js"],"names":["default","polygonContains","distance","epsilon2","radians","containsObjectType","Feature","object","point","containsGeometry","geometry","FeatureCollection","features","i","n","length","containsGeometryType","Sphere","Point","containsPoint","coordinates","MultiPoint","LineString","containsLine","MultiLineString","Polygon","containsPolygon","MultiPolygon","GeometryCollection","geometries","hasOwnProperty","type","ao","bo","ab","Math","pow","map","ringRadians","pointRadians","ring","pop"],"mappings":"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","sourcesContent":["import {default as polygonContains} from \"./polygonContains.js\";\r\nimport {default as distance} from \"./distance.js\";\r\nimport {epsilon2, radians} from \"./math.js\";\r\n\r\nvar containsObjectType = {\r\n  Feature: function(object, point) {\r\n    return containsGeometry(object.geometry, point);\r\n  },\r\n  FeatureCollection: function(object, point) {\r\n    var features = object.features, i = -1, n = features.length;\r\n    while (++i < n) if (containsGeometry(features[i].geometry, point)) return true;\r\n    return false;\r\n  }\r\n};\r\n\r\nvar containsGeometryType = {\r\n  Sphere: function() {\r\n    return true;\r\n  },\r\n  Point: function(object, point) {\r\n    return containsPoint(object.coordinates, point);\r\n  },\r\n  MultiPoint: function(object, point) {\r\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\r\n    while (++i < n) if (containsPoint(coordinates[i], point)) return true;\r\n    return false;\r\n  },\r\n  LineString: function(object, point) {\r\n    return containsLine(object.coordinates, point);\r\n  },\r\n  MultiLineString: function(object, point) {\r\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\r\n    while (++i < n) if (containsLine(coordinates[i], point)) return true;\r\n    return false;\r\n  },\r\n  Polygon: function(object, point) {\r\n    return containsPolygon(object.coordinates, point);\r\n  },\r\n  MultiPolygon: function(object, point) {\r\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\r\n    while (++i < n) if (containsPolygon(coordinates[i], point)) return true;\r\n    return false;\r\n  },\r\n  GeometryCollection: function(object, point) {\r\n    var geometries = object.geometries, i = -1, n = geometries.length;\r\n    while (++i < n) if (containsGeometry(geometries[i], point)) return true;\r\n    return false;\r\n  }\r\n};\r\n\r\nfunction containsGeometry(geometry, point) {\r\n  return geometry && containsGeometryType.hasOwnProperty(geometry.type)\r\n      ? containsGeometryType[geometry.type](geometry, point)\r\n      : false;\r\n}\r\n\r\nfunction containsPoint(coordinates, point) {\r\n  return distance(coordinates, point) === 0;\r\n}\r\n\r\nfunction containsLine(coordinates, point) {\r\n  var ao, bo, ab;\r\n  for (var i = 0, n = coordinates.length; i < n; i++) {\r\n    bo = distance(coordinates[i], point);\r\n    if (bo === 0) return true;\r\n    if (i > 0) {\r\n      ab = distance(coordinates[i], coordinates[i - 1]);\r\n      if (\r\n        ab > 0 &&\r\n        ao <= ab &&\r\n        bo <= ab &&\r\n        (ao + bo - ab) * (1 - Math.pow((ao - bo) / ab, 2)) < epsilon2 * ab\r\n      )\r\n        return true;\r\n    }\r\n    ao = bo;\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction containsPolygon(coordinates, point) {\r\n  return !!polygonContains(coordinates.map(ringRadians), pointRadians(point));\r\n}\r\n\r\nfunction ringRadians(ring) {\r\n  return ring = ring.map(pointRadians), ring.pop(), ring;\r\n}\r\n\r\nfunction pointRadians(point) {\r\n  return [point[0] * radians, point[1] * radians];\r\n}\r\n\r\nexport default function(object, point) {\r\n  return (object && containsObjectType.hasOwnProperty(object.type)\r\n      ? containsObjectType[object.type]\r\n      : containsGeometry)(object, point);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}