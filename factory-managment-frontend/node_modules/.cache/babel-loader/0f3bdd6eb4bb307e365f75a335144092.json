{"ast":null,"code":"import adder from \"./adder.js\";\nimport { atan2, cos, quarterPi, radians, sin, tau } from \"./math.js\";\nimport noop from \"./noop.js\";\nimport stream from \"./stream.js\";\nexport var areaRingSum = adder();\nvar areaSum = adder(),\n    lambda00,\n    phi00,\n    lambda0,\n    cosPhi0,\n    sinPhi0;\nexport var areaStream = {\n  point: noop,\n  lineStart: noop,\n  lineEnd: noop,\n  polygonStart: function () {\n    areaRingSum.reset();\n    areaStream.lineStart = areaRingStart;\n    areaStream.lineEnd = areaRingEnd;\n  },\n  polygonEnd: function () {\n    var areaRing = +areaRingSum;\n    areaSum.add(areaRing < 0 ? tau + areaRing : areaRing);\n    this.lineStart = this.lineEnd = this.point = noop;\n  },\n  sphere: function () {\n    areaSum.add(tau);\n  }\n};\n\nfunction areaRingStart() {\n  areaStream.point = areaPointFirst;\n}\n\nfunction areaRingEnd() {\n  areaPoint(lambda00, phi00);\n}\n\nfunction areaPointFirst(lambda, phi) {\n  areaStream.point = areaPoint;\n  lambda00 = lambda, phi00 = phi;\n  lambda *= radians, phi *= radians;\n  lambda0 = lambda, cosPhi0 = cos(phi = phi / 2 + quarterPi), sinPhi0 = sin(phi);\n}\n\nfunction areaPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  phi = phi / 2 + quarterPi; // half the angular distance from south pole\n  // Spherical excess E for a spherical triangle with vertices: south pole,\n  // previous point, current point.  Uses a formula derived from Cagnoli’s\n  // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).\n\n  var dLambda = lambda - lambda0,\n      sdLambda = dLambda >= 0 ? 1 : -1,\n      adLambda = sdLambda * dLambda,\n      cosPhi = cos(phi),\n      sinPhi = sin(phi),\n      k = sinPhi0 * sinPhi,\n      u = cosPhi0 * cosPhi + k * cos(adLambda),\n      v = k * sdLambda * sin(adLambda);\n  areaRingSum.add(atan2(v, u)); // Advance the previous points.\n\n  lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;\n}\n\nexport default function (object) {\n  areaSum.reset();\n  stream(object, areaStream);\n  return areaSum * 2;\n}","map":{"version":3,"sources":["C:/Users/thero/OneDrive/Documents/factory-management/factory-management/factory-managment-frontend/node_modules/d3-geo/src/area.js"],"names":["adder","atan2","cos","quarterPi","radians","sin","tau","noop","stream","areaRingSum","areaSum","lambda00","phi00","lambda0","cosPhi0","sinPhi0","areaStream","point","lineStart","lineEnd","polygonStart","reset","areaRingStart","areaRingEnd","polygonEnd","areaRing","add","sphere","areaPointFirst","areaPoint","lambda","phi","dLambda","sdLambda","adLambda","cosPhi","sinPhi","k","u","v","object"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,YAAlB;AACA,SAAQC,KAAR,EAAeC,GAAf,EAAoBC,SAApB,EAA+BC,OAA/B,EAAwCC,GAAxC,EAA6CC,GAA7C,QAAuD,WAAvD;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AAEA,OAAO,IAAIC,WAAW,GAAGT,KAAK,EAAvB;AAEP,IAAIU,OAAO,GAAGV,KAAK,EAAnB;AAAA,IACIW,QADJ;AAAA,IAEIC,KAFJ;AAAA,IAGIC,OAHJ;AAAA,IAIIC,OAJJ;AAAA,IAKIC,OALJ;AAOA,OAAO,IAAIC,UAAU,GAAG;AACtBC,EAAAA,KAAK,EAAEV,IADe;AAEtBW,EAAAA,SAAS,EAAEX,IAFW;AAGtBY,EAAAA,OAAO,EAAEZ,IAHa;AAItBa,EAAAA,YAAY,EAAE,YAAW;AACvBX,IAAAA,WAAW,CAACY,KAAZ;AACAL,IAAAA,UAAU,CAACE,SAAX,GAAuBI,aAAvB;AACAN,IAAAA,UAAU,CAACG,OAAX,GAAqBI,WAArB;AACD,GARqB;AAStBC,EAAAA,UAAU,EAAE,YAAW;AACrB,QAAIC,QAAQ,GAAG,CAAChB,WAAhB;AACAC,IAAAA,OAAO,CAACgB,GAAR,CAAYD,QAAQ,GAAG,CAAX,GAAenB,GAAG,GAAGmB,QAArB,GAAgCA,QAA5C;AACA,SAAKP,SAAL,GAAiB,KAAKC,OAAL,GAAe,KAAKF,KAAL,GAAaV,IAA7C;AACD,GAbqB;AActBoB,EAAAA,MAAM,EAAE,YAAW;AACjBjB,IAAAA,OAAO,CAACgB,GAAR,CAAYpB,GAAZ;AACD;AAhBqB,CAAjB;;AAmBP,SAASgB,aAAT,GAAyB;AACvBN,EAAAA,UAAU,CAACC,KAAX,GAAmBW,cAAnB;AACD;;AAED,SAASL,WAAT,GAAuB;AACrBM,EAAAA,SAAS,CAAClB,QAAD,EAAWC,KAAX,CAAT;AACD;;AAED,SAASgB,cAAT,CAAwBE,MAAxB,EAAgCC,GAAhC,EAAqC;AACnCf,EAAAA,UAAU,CAACC,KAAX,GAAmBY,SAAnB;AACAlB,EAAAA,QAAQ,GAAGmB,MAAX,EAAmBlB,KAAK,GAAGmB,GAA3B;AACAD,EAAAA,MAAM,IAAI1B,OAAV,EAAmB2B,GAAG,IAAI3B,OAA1B;AACAS,EAAAA,OAAO,GAAGiB,MAAV,EAAkBhB,OAAO,GAAGZ,GAAG,CAAC6B,GAAG,GAAGA,GAAG,GAAG,CAAN,GAAU5B,SAAjB,CAA/B,EAA4DY,OAAO,GAAGV,GAAG,CAAC0B,GAAD,CAAzE;AACD;;AAED,SAASF,SAAT,CAAmBC,MAAnB,EAA2BC,GAA3B,EAAgC;AAC9BD,EAAAA,MAAM,IAAI1B,OAAV,EAAmB2B,GAAG,IAAI3B,OAA1B;AACA2B,EAAAA,GAAG,GAAGA,GAAG,GAAG,CAAN,GAAU5B,SAAhB,CAF8B,CAEH;AAE3B;AACA;AACA;;AACA,MAAI6B,OAAO,GAAGF,MAAM,GAAGjB,OAAvB;AAAA,MACIoB,QAAQ,GAAGD,OAAO,IAAI,CAAX,GAAe,CAAf,GAAmB,CAAC,CADnC;AAAA,MAEIE,QAAQ,GAAGD,QAAQ,GAAGD,OAF1B;AAAA,MAGIG,MAAM,GAAGjC,GAAG,CAAC6B,GAAD,CAHhB;AAAA,MAIIK,MAAM,GAAG/B,GAAG,CAAC0B,GAAD,CAJhB;AAAA,MAKIM,CAAC,GAAGtB,OAAO,GAAGqB,MALlB;AAAA,MAMIE,CAAC,GAAGxB,OAAO,GAAGqB,MAAV,GAAmBE,CAAC,GAAGnC,GAAG,CAACgC,QAAD,CANlC;AAAA,MAOIK,CAAC,GAAGF,CAAC,GAAGJ,QAAJ,GAAe5B,GAAG,CAAC6B,QAAD,CAP1B;AAQAzB,EAAAA,WAAW,CAACiB,GAAZ,CAAgBzB,KAAK,CAACsC,CAAD,EAAID,CAAJ,CAArB,EAf8B,CAiB9B;;AACAzB,EAAAA,OAAO,GAAGiB,MAAV,EAAkBhB,OAAO,GAAGqB,MAA5B,EAAoCpB,OAAO,GAAGqB,MAA9C;AACD;;AAED,eAAe,UAASI,MAAT,EAAiB;AAC9B9B,EAAAA,OAAO,CAACW,KAAR;AACAb,EAAAA,MAAM,CAACgC,MAAD,EAASxB,UAAT,CAAN;AACA,SAAON,OAAO,GAAG,CAAjB;AACD","sourcesContent":["import adder from \"./adder.js\";\r\nimport {atan2, cos, quarterPi, radians, sin, tau} from \"./math.js\";\r\nimport noop from \"./noop.js\";\r\nimport stream from \"./stream.js\";\r\n\r\nexport var areaRingSum = adder();\r\n\r\nvar areaSum = adder(),\r\n    lambda00,\r\n    phi00,\r\n    lambda0,\r\n    cosPhi0,\r\n    sinPhi0;\r\n\r\nexport var areaStream = {\r\n  point: noop,\r\n  lineStart: noop,\r\n  lineEnd: noop,\r\n  polygonStart: function() {\r\n    areaRingSum.reset();\r\n    areaStream.lineStart = areaRingStart;\r\n    areaStream.lineEnd = areaRingEnd;\r\n  },\r\n  polygonEnd: function() {\r\n    var areaRing = +areaRingSum;\r\n    areaSum.add(areaRing < 0 ? tau + areaRing : areaRing);\r\n    this.lineStart = this.lineEnd = this.point = noop;\r\n  },\r\n  sphere: function() {\r\n    areaSum.add(tau);\r\n  }\r\n};\r\n\r\nfunction areaRingStart() {\r\n  areaStream.point = areaPointFirst;\r\n}\r\n\r\nfunction areaRingEnd() {\r\n  areaPoint(lambda00, phi00);\r\n}\r\n\r\nfunction areaPointFirst(lambda, phi) {\r\n  areaStream.point = areaPoint;\r\n  lambda00 = lambda, phi00 = phi;\r\n  lambda *= radians, phi *= radians;\r\n  lambda0 = lambda, cosPhi0 = cos(phi = phi / 2 + quarterPi), sinPhi0 = sin(phi);\r\n}\r\n\r\nfunction areaPoint(lambda, phi) {\r\n  lambda *= radians, phi *= radians;\r\n  phi = phi / 2 + quarterPi; // half the angular distance from south pole\r\n\r\n  // Spherical excess E for a spherical triangle with vertices: south pole,\r\n  // previous point, current point.  Uses a formula derived from Cagnoli’s\r\n  // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).\r\n  var dLambda = lambda - lambda0,\r\n      sdLambda = dLambda >= 0 ? 1 : -1,\r\n      adLambda = sdLambda * dLambda,\r\n      cosPhi = cos(phi),\r\n      sinPhi = sin(phi),\r\n      k = sinPhi0 * sinPhi,\r\n      u = cosPhi0 * cosPhi + k * cos(adLambda),\r\n      v = k * sdLambda * sin(adLambda);\r\n  areaRingSum.add(atan2(v, u));\r\n\r\n  // Advance the previous points.\r\n  lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;\r\n}\r\n\r\nexport default function(object) {\r\n  areaSum.reset();\r\n  stream(object, areaStream);\r\n  return areaSum * 2;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}