{"ast":null,"code":"import jsPDF from \"jspdf\";\nimport \"jspdf-autotable\";\nimport { format } from \"date-fns\"; // define a generatePDF function that accepts a tickets argument\n\nconst generatePDF = (tickets, title) => {\n  // initialize jsPDF\n  const doc = new jsPDF(); // define the columns we want and their titles\n  //const tableColumn = [\"Id\", \"Title\", \"Issue\", \"Status\", \"Closed on\"];\n\n  const tableColumn = [\"Code\", \"Type\", \"Category\", \"quantity\", \"Supplier\", \"Added date\"]; // define an empty array of rows\n\n  const tableRows = []; // for each ticket pass all its data into an array\n\n  tickets.forEach(ticket => {\n    const ticketData = [ticket.iCode, ticket.iType, ticket.iCategory, ticket.iQuantity, ticket.iSupplier, // called date-fns to format the date on the ticket\n    format(new Date(ticket.iAddedDate), \"yyyy-MM-dd\")]; // push each tickcet's info into a row\n\n    tableRows.push(ticketData);\n  }); // startY is basically margin-top\n\n  doc.autoTable(tableColumn, tableRows, {\n    startY: 20\n  });\n  const date = Date().split(\" \"); // we use a date string to generate our filename.\n\n  const dateStr = date[0] + date[1] + date[2] + date[3] + date[4]; // ticket title. and margin-top + margin-left\n\n  doc.text(title, 14, 15); // we define the name of our PDF file.\n\n  doc.save(`report_${dateStr}.pdf`);\n};\n\nexport default generatePDF;","map":{"version":3,"sources":["C:/Users/thero/OneDrive/Documents/factory-management/factory-management/factory-managment-frontend/src/components/storeManager/utils/reportGenerator.js"],"names":["jsPDF","format","generatePDF","tickets","title","doc","tableColumn","tableRows","forEach","ticket","ticketData","iCode","iType","iCategory","iQuantity","iSupplier","Date","iAddedDate","push","autoTable","startY","date","split","dateStr","text","save"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,iBAAP;AACA,SAASC,MAAT,QAAuB,UAAvB,C,CAEA;;AACA,MAAMC,WAAW,GAAG,CAACC,OAAD,EAAUC,KAAV,KAAoB;AACtC;AACA,QAAMC,GAAG,GAAG,IAAIL,KAAJ,EAAZ,CAFsC,CAItC;AACA;;AACA,QAAMM,WAAW,GAAG,CAClB,MADkB,EAElB,MAFkB,EAGlB,UAHkB,EAIlB,UAJkB,EAKlB,UALkB,EAMlB,YANkB,CAApB,CANsC,CActC;;AACA,QAAMC,SAAS,GAAG,EAAlB,CAfsC,CAiBtC;;AACAJ,EAAAA,OAAO,CAACK,OAAR,CAAiBC,MAAD,IAAY;AAC1B,UAAMC,UAAU,GAAG,CACjBD,MAAM,CAACE,KADU,EAEjBF,MAAM,CAACG,KAFU,EAGjBH,MAAM,CAACI,SAHU,EAIjBJ,MAAM,CAACK,SAJU,EAKjBL,MAAM,CAACM,SALU,EAOjB;AACAd,IAAAA,MAAM,CAAC,IAAIe,IAAJ,CAASP,MAAM,CAACQ,UAAhB,CAAD,EAA8B,YAA9B,CARW,CAAnB,CAD0B,CAW1B;;AACAV,IAAAA,SAAS,CAACW,IAAV,CAAeR,UAAf;AACD,GAbD,EAlBsC,CAiCtC;;AACAL,EAAAA,GAAG,CAACc,SAAJ,CAAcb,WAAd,EAA2BC,SAA3B,EAAsC;AAAEa,IAAAA,MAAM,EAAE;AAAV,GAAtC;AACA,QAAMC,IAAI,GAAGL,IAAI,GAAGM,KAAP,CAAa,GAAb,CAAb,CAnCsC,CAoCtC;;AACA,QAAMC,OAAO,GAAGF,IAAI,CAAC,CAAD,CAAJ,GAAUA,IAAI,CAAC,CAAD,CAAd,GAAoBA,IAAI,CAAC,CAAD,CAAxB,GAA8BA,IAAI,CAAC,CAAD,CAAlC,GAAwCA,IAAI,CAAC,CAAD,CAA5D,CArCsC,CAsCtC;;AACAhB,EAAAA,GAAG,CAACmB,IAAJ,CAASpB,KAAT,EAAgB,EAAhB,EAAoB,EAApB,EAvCsC,CAwCtC;;AACAC,EAAAA,GAAG,CAACoB,IAAJ,CAAU,UAASF,OAAQ,MAA3B;AACD,CA1CD;;AA4CA,eAAerB,WAAf","sourcesContent":["import jsPDF from \"jspdf\";\r\nimport \"jspdf-autotable\";\r\nimport { format } from \"date-fns\";\r\n\r\n// define a generatePDF function that accepts a tickets argument\r\nconst generatePDF = (tickets, title) => {\r\n  // initialize jsPDF\r\n  const doc = new jsPDF();\r\n\r\n  // define the columns we want and their titles\r\n  //const tableColumn = [\"Id\", \"Title\", \"Issue\", \"Status\", \"Closed on\"];\r\n  const tableColumn = [\r\n    \"Code\",\r\n    \"Type\",\r\n    \"Category\",\r\n    \"quantity\",\r\n    \"Supplier\",\r\n    \"Added date\",\r\n  ];\r\n  // define an empty array of rows\r\n  const tableRows = [];\r\n\r\n  // for each ticket pass all its data into an array\r\n  tickets.forEach((ticket) => {\r\n    const ticketData = [\r\n      ticket.iCode,\r\n      ticket.iType,\r\n      ticket.iCategory,\r\n      ticket.iQuantity,\r\n      ticket.iSupplier,\r\n\r\n      // called date-fns to format the date on the ticket\r\n      format(new Date(ticket.iAddedDate), \"yyyy-MM-dd\"),\r\n    ];\r\n    // push each tickcet's info into a row\r\n    tableRows.push(ticketData);\r\n  });\r\n\r\n  // startY is basically margin-top\r\n  doc.autoTable(tableColumn, tableRows, { startY: 20 });\r\n  const date = Date().split(\" \");\r\n  // we use a date string to generate our filename.\r\n  const dateStr = date[0] + date[1] + date[2] + date[3] + date[4];\r\n  // ticket title. and margin-top + margin-left\r\n  doc.text(title, 14, 15);\r\n  // we define the name of our PDF file.\r\n  doc.save(`report_${dateStr}.pdf`);\r\n};\r\n\r\nexport default generatePDF;\r\n"]},"metadata":{},"sourceType":"module"}