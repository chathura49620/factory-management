{"ast":null,"code":"import startOfWeek from \"../startOfWeek/index.js\";\nimport startOfWeekYear from \"../startOfWeekYear/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nvar MILLISECONDS_IN_WEEK = 604800000;\n/**\r\n * @name getWeek\r\n * @category Week Helpers\r\n * @summary Get the local week index of the given date.\r\n *\r\n * @description\r\n * Get the local week index of the given date.\r\n * The exact calculation depends on the values of\r\n * `options.weekStartsOn` (which is the index of the first day of the week)\r\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\r\n * the first week of the week-numbering year)\r\n *\r\n * Week numbering: https://en.wikipedia.org/wiki/Week#Week_numbering\r\n *\r\n * ### v2.0.0 breaking changes:\r\n *\r\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\r\n *\r\n * @param {Date|Number} date - the given date\r\n * @param {Object} [options] - an object with options.\r\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\r\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\r\n * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year\r\n * @returns {Number} the week\r\n * @throws {TypeError} 1 argument required\r\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\r\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\r\n *\r\n * @example\r\n * // Which week of the local week numbering year is 2 January 2005 with default options?\r\n * const result = getISOWeek(new Date(2005, 0, 2))\r\n * //=> 2\r\n *\r\n * // Which week of the local week numbering year is 2 January 2005,\r\n * // if Monday is the first day of the week,\r\n * // and the first week of the year always contains 4 January?\r\n * const result = getISOWeek(new Date(2005, 0, 2), {\r\n *   weekStartsOn: 1,\r\n *   firstWeekContainsDate: 4\r\n * })\r\n * //=> 53\r\n */\n\nexport default function getWeek(dirtyDate, options) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var diff = startOfWeek(date, options).getTime() - startOfWeekYear(date, options).getTime(); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;\n}","map":{"version":3,"sources":["C:/Users/thero/OneDrive/Documents/factory-management/factory-management/factory-managment-frontend/node_modules/date-fns/esm/getWeek/index.js"],"names":["startOfWeek","startOfWeekYear","toDate","requiredArgs","MILLISECONDS_IN_WEEK","getWeek","dirtyDate","options","arguments","date","diff","getTime","Math","round"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,yBAAxB;AACA,OAAOC,eAAP,MAA4B,6BAA5B;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AACA,IAAIC,oBAAoB,GAAG,SAA3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,OAAT,CAAiBC,SAAjB,EAA4BC,OAA5B,EAAqC;AAClDJ,EAAAA,YAAY,CAAC,CAAD,EAAIK,SAAJ,CAAZ;AACA,MAAIC,IAAI,GAAGP,MAAM,CAACI,SAAD,CAAjB;AACA,MAAII,IAAI,GAAGV,WAAW,CAACS,IAAD,EAAOF,OAAP,CAAX,CAA2BI,OAA3B,KAAuCV,eAAe,CAACQ,IAAD,EAAOF,OAAP,CAAf,CAA+BI,OAA/B,EAAlD,CAHkD,CAG0C;AAC5F;AACA;;AAEA,SAAOC,IAAI,CAACC,KAAL,CAAWH,IAAI,GAAGN,oBAAlB,IAA0C,CAAjD;AACD","sourcesContent":["import startOfWeek from \"../startOfWeek/index.js\";\r\nimport startOfWeekYear from \"../startOfWeekYear/index.js\";\r\nimport toDate from \"../toDate/index.js\";\r\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\r\nvar MILLISECONDS_IN_WEEK = 604800000;\r\n/**\r\n * @name getWeek\r\n * @category Week Helpers\r\n * @summary Get the local week index of the given date.\r\n *\r\n * @description\r\n * Get the local week index of the given date.\r\n * The exact calculation depends on the values of\r\n * `options.weekStartsOn` (which is the index of the first day of the week)\r\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\r\n * the first week of the week-numbering year)\r\n *\r\n * Week numbering: https://en.wikipedia.org/wiki/Week#Week_numbering\r\n *\r\n * ### v2.0.0 breaking changes:\r\n *\r\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\r\n *\r\n * @param {Date|Number} date - the given date\r\n * @param {Object} [options] - an object with options.\r\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\r\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\r\n * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year\r\n * @returns {Number} the week\r\n * @throws {TypeError} 1 argument required\r\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\r\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\r\n *\r\n * @example\r\n * // Which week of the local week numbering year is 2 January 2005 with default options?\r\n * const result = getISOWeek(new Date(2005, 0, 2))\r\n * //=> 2\r\n *\r\n * // Which week of the local week numbering year is 2 January 2005,\r\n * // if Monday is the first day of the week,\r\n * // and the first week of the year always contains 4 January?\r\n * const result = getISOWeek(new Date(2005, 0, 2), {\r\n *   weekStartsOn: 1,\r\n *   firstWeekContainsDate: 4\r\n * })\r\n * //=> 53\r\n */\r\n\r\nexport default function getWeek(dirtyDate, options) {\r\n  requiredArgs(1, arguments);\r\n  var date = toDate(dirtyDate);\r\n  var diff = startOfWeek(date, options).getTime() - startOfWeekYear(date, options).getTime(); // Round the number of days to the nearest integer\r\n  // because the number of milliseconds in a week is not constant\r\n  // (e.g. it's different in the week of the daylight saving time clock shift)\r\n\r\n  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;\r\n}"]},"metadata":{},"sourceType":"module"}