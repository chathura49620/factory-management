{"ast":null,"code":"import requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\r\n * @name intlFormat\r\n * @category Common Helpers\r\n * @summary  Format the date with Intl.DateTimeFormat (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat).\r\n *\r\n * @description\r\n * Return the formatted date string in the given format.\r\n * The method uses [`Intl.DateTimeFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat) inside.\r\n * formatOptions are the same as [`Intl.DateTimeFormat` options](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat#using_options)\r\n *\r\n * > ⚠️ Please note that before Node version 13.0.0, only the locale data for en-US is available by default.\r\n *\r\n * @param {Date|Number} argument - the original date.\r\n * @param {Object} [formatOptions] - an object with options.\r\n * @param {'lookup'|'best fit'} [formatOptions.localeMatcher='best fit'] - locale selection algorithm.\r\n * @param {'narrow'|'short'|'long'} [formatOptions.weekday] - representation the days of the week.\r\n * @param {'narrow'|'short'|'long'} [formatOptions.era] - representation of eras.\r\n * @param {'numeric'|'2-digit'} [formatOptions.year] - representation of years.\r\n * @param {'numeric'|'2-digit'|'narrow'|'short'|'long'} [formatOptions.month='numeric'] - representation of month.\r\n * @param {'numeric'|'2-digit'} [formatOptions.day='numeric'] - representation of day.\r\n * @param {'numeric'|'2-digit'} [formatOptions.hour='numeric'] - representation of hours.\r\n * @param {'numeric'|'2-digit'} [formatOptions.minute] - representation of minutes.\r\n * @param {'numeric'|'2-digit'} [formatOptions.second] - representation of seconds.\r\n * @param {'short'|'long'} [formatOptions.timeZoneName] - representation of names of time zones.\r\n * @param {'basic'|'best fit'} [formatOptions.formatMatcher='best fit'] - format selection algorithm.\r\n * @param {Boolean} [formatOptions.hour12] - determines whether to use 12-hour time format.\r\n * @param {String} [formatOptions.timeZone] - the time zone to use.\r\n * @param {Object} [localeOptions] - an object with locale.\r\n * @param {String|String[]} [localeOptions.locale] - the locale code\r\n * @returns {String} the formatted date string.\r\n * @throws {TypeError} 1 argument required.\r\n * @throws {RangeError} `date` must not be Invalid Date\r\n *\r\n * @example\r\n * // Represent 10 October 2019 in German.\r\n * // Convert the date with format's options and locale's options.\r\n * const result = intlFormat(new Date(2019, 9, 4, 12, 30, 13, 456), {\r\n *      weekday: 'long',\r\n *      year: 'numeric',\r\n *      month: 'long',\r\n *      day: 'numeric',\r\n *    }, {\r\n *      locale: 'de-DE',\r\n *  })\r\n * //=> Freitag, 4. Oktober 2019\r\n *\r\n * @example\r\n * // Represent 10 October 2019.\r\n * // Convert the date with format's options.\r\n * const result = intlFormat.default(new Date(2019, 9, 4, 12, 30, 13, 456), {\r\n *      year: 'numeric',\r\n *      month: 'numeric',\r\n *      day: 'numeric',\r\n *      hour: 'numeric',\r\n *  })\r\n * //=> 10/4/2019, 12 PM\r\n *\r\n * @example\r\n * // Represent 10 October 2019 in Korean.\r\n * // Convert the date with locale's options.\r\n * const result = intlFormat(new Date(2019, 9, 4, 12, 30, 13, 456), {\r\n *      locale: 'ko-KR',\r\n *  })\r\n * //=> 2019. 10. 4.\r\n *\r\n * @example\r\n * // Represent 10 October 2019 in middle-endian format:\r\n * const result = intlFormat(new Date(2019, 9, 4, 12, 30, 13, 456))\r\n * //=> 10/4/2019\r\n */\n\nexport default function intlFormat(date, formatOrLocale, localeOptions) {\n  var _localeOptions;\n\n  requiredArgs(1, arguments);\n  var formatOptions;\n\n  if (isFormatOptions(formatOrLocale)) {\n    formatOptions = formatOrLocale;\n  } else {\n    localeOptions = formatOrLocale;\n  }\n\n  return new Intl.DateTimeFormat((_localeOptions = localeOptions) === null || _localeOptions === void 0 ? void 0 : _localeOptions.locale, formatOptions).format(date);\n}\n\nfunction isFormatOptions(opts) {\n  return opts !== undefined && !('locale' in opts);\n}","map":{"version":3,"sources":["C:/Users/thero/OneDrive/Documents/factory-management/factory-management/factory-managment-frontend/node_modules/date-fns/esm/intlFormat/index.js"],"names":["requiredArgs","intlFormat","date","formatOrLocale","localeOptions","_localeOptions","arguments","formatOptions","isFormatOptions","Intl","DateTimeFormat","locale","format","opts","undefined"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,+BAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,UAAT,CAAoBC,IAApB,EAA0BC,cAA1B,EAA0CC,aAA1C,EAAyD;AACtE,MAAIC,cAAJ;;AAEAL,EAAAA,YAAY,CAAC,CAAD,EAAIM,SAAJ,CAAZ;AACA,MAAIC,aAAJ;;AAEA,MAAIC,eAAe,CAACL,cAAD,CAAnB,EAAqC;AACnCI,IAAAA,aAAa,GAAGJ,cAAhB;AACD,GAFD,MAEO;AACLC,IAAAA,aAAa,GAAGD,cAAhB;AACD;;AAED,SAAO,IAAIM,IAAI,CAACC,cAAT,CAAwB,CAACL,cAAc,GAAGD,aAAlB,MAAqC,IAArC,IAA6CC,cAAc,KAAK,KAAK,CAArE,GAAyE,KAAK,CAA9E,GAAkFA,cAAc,CAACM,MAAzH,EAAiIJ,aAAjI,EAAgJK,MAAhJ,CAAuJV,IAAvJ,CAAP;AACD;;AAED,SAASM,eAAT,CAAyBK,IAAzB,EAA+B;AAC7B,SAAOA,IAAI,KAAKC,SAAT,IAAsB,EAAE,YAAYD,IAAd,CAA7B;AACD","sourcesContent":["import requiredArgs from \"../_lib/requiredArgs/index.js\";\r\n\r\n/**\r\n * @name intlFormat\r\n * @category Common Helpers\r\n * @summary  Format the date with Intl.DateTimeFormat (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat).\r\n *\r\n * @description\r\n * Return the formatted date string in the given format.\r\n * The method uses [`Intl.DateTimeFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat) inside.\r\n * formatOptions are the same as [`Intl.DateTimeFormat` options](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat#using_options)\r\n *\r\n * > ⚠️ Please note that before Node version 13.0.0, only the locale data for en-US is available by default.\r\n *\r\n * @param {Date|Number} argument - the original date.\r\n * @param {Object} [formatOptions] - an object with options.\r\n * @param {'lookup'|'best fit'} [formatOptions.localeMatcher='best fit'] - locale selection algorithm.\r\n * @param {'narrow'|'short'|'long'} [formatOptions.weekday] - representation the days of the week.\r\n * @param {'narrow'|'short'|'long'} [formatOptions.era] - representation of eras.\r\n * @param {'numeric'|'2-digit'} [formatOptions.year] - representation of years.\r\n * @param {'numeric'|'2-digit'|'narrow'|'short'|'long'} [formatOptions.month='numeric'] - representation of month.\r\n * @param {'numeric'|'2-digit'} [formatOptions.day='numeric'] - representation of day.\r\n * @param {'numeric'|'2-digit'} [formatOptions.hour='numeric'] - representation of hours.\r\n * @param {'numeric'|'2-digit'} [formatOptions.minute] - representation of minutes.\r\n * @param {'numeric'|'2-digit'} [formatOptions.second] - representation of seconds.\r\n * @param {'short'|'long'} [formatOptions.timeZoneName] - representation of names of time zones.\r\n * @param {'basic'|'best fit'} [formatOptions.formatMatcher='best fit'] - format selection algorithm.\r\n * @param {Boolean} [formatOptions.hour12] - determines whether to use 12-hour time format.\r\n * @param {String} [formatOptions.timeZone] - the time zone to use.\r\n * @param {Object} [localeOptions] - an object with locale.\r\n * @param {String|String[]} [localeOptions.locale] - the locale code\r\n * @returns {String} the formatted date string.\r\n * @throws {TypeError} 1 argument required.\r\n * @throws {RangeError} `date` must not be Invalid Date\r\n *\r\n * @example\r\n * // Represent 10 October 2019 in German.\r\n * // Convert the date with format's options and locale's options.\r\n * const result = intlFormat(new Date(2019, 9, 4, 12, 30, 13, 456), {\r\n *      weekday: 'long',\r\n *      year: 'numeric',\r\n *      month: 'long',\r\n *      day: 'numeric',\r\n *    }, {\r\n *      locale: 'de-DE',\r\n *  })\r\n * //=> Freitag, 4. Oktober 2019\r\n *\r\n * @example\r\n * // Represent 10 October 2019.\r\n * // Convert the date with format's options.\r\n * const result = intlFormat.default(new Date(2019, 9, 4, 12, 30, 13, 456), {\r\n *      year: 'numeric',\r\n *      month: 'numeric',\r\n *      day: 'numeric',\r\n *      hour: 'numeric',\r\n *  })\r\n * //=> 10/4/2019, 12 PM\r\n *\r\n * @example\r\n * // Represent 10 October 2019 in Korean.\r\n * // Convert the date with locale's options.\r\n * const result = intlFormat(new Date(2019, 9, 4, 12, 30, 13, 456), {\r\n *      locale: 'ko-KR',\r\n *  })\r\n * //=> 2019. 10. 4.\r\n *\r\n * @example\r\n * // Represent 10 October 2019 in middle-endian format:\r\n * const result = intlFormat(new Date(2019, 9, 4, 12, 30, 13, 456))\r\n * //=> 10/4/2019\r\n */\r\nexport default function intlFormat(date, formatOrLocale, localeOptions) {\r\n  var _localeOptions;\r\n\r\n  requiredArgs(1, arguments);\r\n  var formatOptions;\r\n\r\n  if (isFormatOptions(formatOrLocale)) {\r\n    formatOptions = formatOrLocale;\r\n  } else {\r\n    localeOptions = formatOrLocale;\r\n  }\r\n\r\n  return new Intl.DateTimeFormat((_localeOptions = localeOptions) === null || _localeOptions === void 0 ? void 0 : _localeOptions.locale, formatOptions).format(date);\r\n}\r\n\r\nfunction isFormatOptions(opts) {\r\n  return opts !== undefined && !('locale' in opts);\r\n}"]},"metadata":{},"sourceType":"module"}