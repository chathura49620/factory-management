{"ast":null,"code":"import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from './Button';\nimport ButtonGroup from './ButtonGroup';\nimport Dropdown from './Dropdown';\nimport { alignPropType } from './types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst propTypes = {\n  /**\r\n   * An html id attribute for the Toggle button, necessary for assistive technologies, such as screen readers.\r\n   * @type {string}\r\n   * @required\r\n   */\n  id: PropTypes.string,\n\n  /**\r\n   * Accessible label for the toggle; the value of `title` if not specified.\r\n   */\n  toggleLabel: PropTypes.string,\n\n  /** An `href` passed to the non-toggle Button */\n  href: PropTypes.string,\n\n  /** An anchor `target` passed to the non-toggle Button */\n  target: PropTypes.string,\n\n  /** An `onClick` handler passed to the non-toggle Button */\n  onClick: PropTypes.func,\n\n  /** The content of the non-toggle Button.  */\n  title: PropTypes.node.isRequired,\n\n  /** A `type` passed to the non-toggle Button */\n  type: PropTypes.string,\n\n  /** Disables both Buttons  */\n  disabled: PropTypes.bool,\n\n  /**\r\n   * Aligns the dropdown menu.\r\n   *\r\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\r\n   *\r\n   * @type {\"start\"|\"end\"|{ sm: \"start\"|\"end\" }|{ md: \"start\"|\"end\" }|{ lg: \"start\"|\"end\" }|{ xl: \"start\"|\"end\"}|{ xxl: \"start\"|\"end\"} }\r\n   */\n  align: alignPropType,\n\n  /** An ARIA accessible role applied to the Menu component. When set to 'menu', The dropdown */\n  menuRole: PropTypes.string,\n\n  /** Whether to render the dropdown menu in the DOM before the first time it is shown */\n  renderMenuOnMount: PropTypes.bool,\n\n  /**\r\n   *  Which event when fired outside the component will cause it to be closed.\r\n   *\r\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\r\n   */\n  rootCloseEvent: PropTypes.string,\n\n  /** @ignore */\n  bsPrefix: PropTypes.string,\n\n  /** @ignore */\n  variant: PropTypes.string,\n\n  /** @ignore */\n  size: PropTypes.string\n};\nconst defaultProps = {\n  toggleLabel: 'Toggle dropdown',\n  type: 'button'\n};\n/**\r\n * A convenience component for simple or general use split button dropdowns. Renders a\r\n * `ButtonGroup` containing a `Button` and a `Button` toggle for the `Dropdown`. All `children`\r\n * are passed directly to the default `Dropdown.Menu`. This component accepts all of [`Dropdown`'s\r\n * props](#dropdown-props).\r\n *\r\n * _All unknown props are passed through to the `Dropdown` component._\r\n * The Button `variant`, `size` and `bsPrefix` props are passed to the button and toggle,\r\n * and menu-related props are passed to the `Dropdown.Menu`\r\n */\n\nconst SplitButton = /*#__PURE__*/React.forwardRef(({\n  id,\n  bsPrefix,\n  size,\n  variant,\n  title,\n  type,\n  toggleLabel,\n  children,\n  onClick,\n  href,\n  target,\n  menuRole,\n  renderMenuOnMount,\n  rootCloseEvent,\n  ...props\n}, ref) => /*#__PURE__*/_jsxs(Dropdown, {\n  ref: ref,\n  ...props,\n  as: ButtonGroup,\n  children: [/*#__PURE__*/_jsx(Button, {\n    size: size,\n    variant: variant,\n    disabled: props.disabled,\n    bsPrefix: bsPrefix,\n    href: href,\n    target: target,\n    onClick: onClick,\n    type: type,\n    children: title\n  }), /*#__PURE__*/_jsx(Dropdown.Toggle, {\n    split: true,\n    id: id,\n    size: size,\n    variant: variant,\n    disabled: props.disabled,\n    childBsPrefix: bsPrefix,\n    children: /*#__PURE__*/_jsx(\"span\", {\n      className: \"visually-hidden\",\n      children: toggleLabel\n    })\n  }), /*#__PURE__*/_jsx(Dropdown.Menu, {\n    role: menuRole,\n    renderOnMount: renderMenuOnMount,\n    rootCloseEvent: rootCloseEvent,\n    children: children\n  })]\n}));\nSplitButton.propTypes = propTypes;\nSplitButton.defaultProps = defaultProps;\nSplitButton.displayName = 'SplitButton';\nexport default SplitButton;","map":{"version":3,"sources":["C:/Users/thero/OneDrive/Documents/factory-management/factory-management/factory-managment-frontend/node_modules/react-bootstrap/esm/SplitButton.js"],"names":["React","PropTypes","Button","ButtonGroup","Dropdown","alignPropType","jsx","_jsx","jsxs","_jsxs","propTypes","id","string","toggleLabel","href","target","onClick","func","title","node","isRequired","type","disabled","bool","align","menuRole","renderMenuOnMount","rootCloseEvent","bsPrefix","variant","size","defaultProps","SplitButton","forwardRef","children","props","ref","as","Toggle","split","childBsPrefix","className","Menu","role","renderOnMount","displayName"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Button from './Button';\r\nimport ButtonGroup from './ButtonGroup';\r\nimport Dropdown from './Dropdown';\r\nimport { alignPropType } from './types';\r\nimport { jsx as _jsx } from \"react/jsx-runtime\";\r\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\r\nconst propTypes = {\r\n  /**\r\n   * An html id attribute for the Toggle button, necessary for assistive technologies, such as screen readers.\r\n   * @type {string}\r\n   * @required\r\n   */\r\n  id: PropTypes.string,\r\n\r\n  /**\r\n   * Accessible label for the toggle; the value of `title` if not specified.\r\n   */\r\n  toggleLabel: PropTypes.string,\r\n\r\n  /** An `href` passed to the non-toggle Button */\r\n  href: PropTypes.string,\r\n\r\n  /** An anchor `target` passed to the non-toggle Button */\r\n  target: PropTypes.string,\r\n\r\n  /** An `onClick` handler passed to the non-toggle Button */\r\n  onClick: PropTypes.func,\r\n\r\n  /** The content of the non-toggle Button.  */\r\n  title: PropTypes.node.isRequired,\r\n\r\n  /** A `type` passed to the non-toggle Button */\r\n  type: PropTypes.string,\r\n\r\n  /** Disables both Buttons  */\r\n  disabled: PropTypes.bool,\r\n\r\n  /**\r\n   * Aligns the dropdown menu.\r\n   *\r\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\r\n   *\r\n   * @type {\"start\"|\"end\"|{ sm: \"start\"|\"end\" }|{ md: \"start\"|\"end\" }|{ lg: \"start\"|\"end\" }|{ xl: \"start\"|\"end\"}|{ xxl: \"start\"|\"end\"} }\r\n   */\r\n  align: alignPropType,\r\n\r\n  /** An ARIA accessible role applied to the Menu component. When set to 'menu', The dropdown */\r\n  menuRole: PropTypes.string,\r\n\r\n  /** Whether to render the dropdown menu in the DOM before the first time it is shown */\r\n  renderMenuOnMount: PropTypes.bool,\r\n\r\n  /**\r\n   *  Which event when fired outside the component will cause it to be closed.\r\n   *\r\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\r\n   */\r\n  rootCloseEvent: PropTypes.string,\r\n\r\n  /** @ignore */\r\n  bsPrefix: PropTypes.string,\r\n\r\n  /** @ignore */\r\n  variant: PropTypes.string,\r\n\r\n  /** @ignore */\r\n  size: PropTypes.string\r\n};\r\nconst defaultProps = {\r\n  toggleLabel: 'Toggle dropdown',\r\n  type: 'button'\r\n};\r\n/**\r\n * A convenience component for simple or general use split button dropdowns. Renders a\r\n * `ButtonGroup` containing a `Button` and a `Button` toggle for the `Dropdown`. All `children`\r\n * are passed directly to the default `Dropdown.Menu`. This component accepts all of [`Dropdown`'s\r\n * props](#dropdown-props).\r\n *\r\n * _All unknown props are passed through to the `Dropdown` component._\r\n * The Button `variant`, `size` and `bsPrefix` props are passed to the button and toggle,\r\n * and menu-related props are passed to the `Dropdown.Menu`\r\n */\r\n\r\nconst SplitButton = /*#__PURE__*/React.forwardRef(({\r\n  id,\r\n  bsPrefix,\r\n  size,\r\n  variant,\r\n  title,\r\n  type,\r\n  toggleLabel,\r\n  children,\r\n  onClick,\r\n  href,\r\n  target,\r\n  menuRole,\r\n  renderMenuOnMount,\r\n  rootCloseEvent,\r\n  ...props\r\n}, ref) => /*#__PURE__*/_jsxs(Dropdown, {\r\n  ref: ref,\r\n  ...props,\r\n  as: ButtonGroup,\r\n  children: [/*#__PURE__*/_jsx(Button, {\r\n    size: size,\r\n    variant: variant,\r\n    disabled: props.disabled,\r\n    bsPrefix: bsPrefix,\r\n    href: href,\r\n    target: target,\r\n    onClick: onClick,\r\n    type: type,\r\n    children: title\r\n  }), /*#__PURE__*/_jsx(Dropdown.Toggle, {\r\n    split: true,\r\n    id: id,\r\n    size: size,\r\n    variant: variant,\r\n    disabled: props.disabled,\r\n    childBsPrefix: bsPrefix,\r\n    children: /*#__PURE__*/_jsx(\"span\", {\r\n      className: \"visually-hidden\",\r\n      children: toggleLabel\r\n    })\r\n  }), /*#__PURE__*/_jsx(Dropdown.Menu, {\r\n    role: menuRole,\r\n    renderOnMount: renderMenuOnMount,\r\n    rootCloseEvent: rootCloseEvent,\r\n    children: children\r\n  })]\r\n}));\r\nSplitButton.propTypes = propTypes;\r\nSplitButton.defaultProps = defaultProps;\r\nSplitButton.displayName = 'SplitButton';\r\nexport default SplitButton;"]},"metadata":{},"sourceType":"module"}