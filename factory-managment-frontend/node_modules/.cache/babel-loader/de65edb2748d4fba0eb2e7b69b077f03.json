{"ast":null,"code":"import { RedBlackNode } from \"./RedBlackTree\";\nimport { circles, epsilon2 } from \"./Diagram\";\nvar circlePool = [];\nexport var firstCircle;\n\nfunction Circle() {\n  RedBlackNode(this);\n  this.x = this.y = this.arc = this.site = this.cy = null;\n}\n\nexport function attachCircle(arc) {\n  var lArc = arc.P,\n      rArc = arc.N;\n  if (!lArc || !rArc) return;\n  var lSite = lArc.site,\n      cSite = arc.site,\n      rSite = rArc.site;\n  if (lSite === rSite) return;\n  var bx = cSite[0],\n      by = cSite[1],\n      ax = lSite[0] - bx,\n      ay = lSite[1] - by,\n      cx = rSite[0] - bx,\n      cy = rSite[1] - by;\n  var d = 2 * (ax * cy - ay * cx);\n  if (d >= -epsilon2) return;\n  var ha = ax * ax + ay * ay,\n      hc = cx * cx + cy * cy,\n      x = (cy * ha - ay * hc) / d,\n      y = (ax * hc - cx * ha) / d;\n  var circle = circlePool.pop() || new Circle();\n  circle.arc = arc;\n  circle.site = cSite;\n  circle.x = x + bx;\n  circle.y = (circle.cy = y + by) + Math.sqrt(x * x + y * y); // y bottom\n\n  arc.circle = circle;\n  var before = null,\n      node = circles._;\n\n  while (node) {\n    if (circle.y < node.y || circle.y === node.y && circle.x <= node.x) {\n      if (node.L) node = node.L;else {\n        before = node.P;\n        break;\n      }\n    } else {\n      if (node.R) node = node.R;else {\n        before = node;\n        break;\n      }\n    }\n  }\n\n  circles.insert(before, circle);\n  if (!before) firstCircle = circle;\n}\nexport function detachCircle(arc) {\n  var circle = arc.circle;\n\n  if (circle) {\n    if (!circle.P) firstCircle = circle.N;\n    circles.remove(circle);\n    circlePool.push(circle);\n    RedBlackNode(circle);\n    arc.circle = null;\n  }\n}","map":{"version":3,"sources":["C:/Users/thero/OneDrive/Documents/factory-management/factory-management/factory-managment-frontend/node_modules/d3-voronoi/src/Circle.js"],"names":["RedBlackNode","circles","epsilon2","circlePool","firstCircle","Circle","x","y","arc","site","cy","attachCircle","lArc","P","rArc","N","lSite","cSite","rSite","bx","by","ax","ay","cx","d","ha","hc","circle","pop","Math","sqrt","before","node","_","L","R","insert","detachCircle","remove","push"],"mappings":"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","sourcesContent":["import {RedBlackNode} from \"./RedBlackTree\";\r\nimport {circles, epsilon2} from \"./Diagram\";\r\n\r\nvar circlePool = [];\r\n\r\nexport var firstCircle;\r\n\r\nfunction Circle() {\r\n  RedBlackNode(this);\r\n  this.x =\r\n  this.y =\r\n  this.arc =\r\n  this.site =\r\n  this.cy = null;\r\n}\r\n\r\nexport function attachCircle(arc) {\r\n  var lArc = arc.P,\r\n      rArc = arc.N;\r\n\r\n  if (!lArc || !rArc) return;\r\n\r\n  var lSite = lArc.site,\r\n      cSite = arc.site,\r\n      rSite = rArc.site;\r\n\r\n  if (lSite === rSite) return;\r\n\r\n  var bx = cSite[0],\r\n      by = cSite[1],\r\n      ax = lSite[0] - bx,\r\n      ay = lSite[1] - by,\r\n      cx = rSite[0] - bx,\r\n      cy = rSite[1] - by;\r\n\r\n  var d = 2 * (ax * cy - ay * cx);\r\n  if (d >= -epsilon2) return;\r\n\r\n  var ha = ax * ax + ay * ay,\r\n      hc = cx * cx + cy * cy,\r\n      x = (cy * ha - ay * hc) / d,\r\n      y = (ax * hc - cx * ha) / d;\r\n\r\n  var circle = circlePool.pop() || new Circle;\r\n  circle.arc = arc;\r\n  circle.site = cSite;\r\n  circle.x = x + bx;\r\n  circle.y = (circle.cy = y + by) + Math.sqrt(x * x + y * y); // y bottom\r\n\r\n  arc.circle = circle;\r\n\r\n  var before = null,\r\n      node = circles._;\r\n\r\n  while (node) {\r\n    if (circle.y < node.y || (circle.y === node.y && circle.x <= node.x)) {\r\n      if (node.L) node = node.L;\r\n      else { before = node.P; break; }\r\n    } else {\r\n      if (node.R) node = node.R;\r\n      else { before = node; break; }\r\n    }\r\n  }\r\n\r\n  circles.insert(before, circle);\r\n  if (!before) firstCircle = circle;\r\n}\r\n\r\nexport function detachCircle(arc) {\r\n  var circle = arc.circle;\r\n  if (circle) {\r\n    if (!circle.P) firstCircle = circle.N;\r\n    circles.remove(circle);\r\n    circlePool.push(circle);\r\n    RedBlackNode(circle);\r\n    arc.circle = null;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}