{"ast":null,"code":"import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\r\n * @name areIntervalsOverlapping\r\n * @category Interval Helpers\r\n * @summary Is the given time interval overlapping with another time interval?\r\n *\r\n * @description\r\n * Is the given time interval overlapping with another time interval? Adjacent intervals do not count as overlapping.\r\n *\r\n * ### v2.0.0 breaking changes:\r\n *\r\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\r\n *\r\n * - The function was renamed from `areRangesOverlapping` to `areIntervalsOverlapping`.\r\n *   This change was made to mirror the use of the word \"interval\" in standard ISO 8601:2004 terminology:\r\n *\r\n *   ```\r\n *   2.1.3\r\n *   time interval\r\n *   part of the time axis limited by two instants\r\n *   ```\r\n *\r\n *   Also, this function now accepts an object with `start` and `end` properties\r\n *   instead of two arguments as an interval.\r\n *   This function now throws `RangeError` if the start of the interval is after its end\r\n *   or if any date in the interval is `Invalid Date`.\r\n *\r\n *   ```javascript\r\n *   // Before v2.0.0\r\n *\r\n *   areRangesOverlapping(\r\n *     new Date(2014, 0, 10), new Date(2014, 0, 20),\r\n *     new Date(2014, 0, 17), new Date(2014, 0, 21)\r\n *   )\r\n *\r\n *   // v2.0.0 onward\r\n *\r\n *   areIntervalsOverlapping(\r\n *     { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\r\n *     { start: new Date(2014, 0, 17), end: new Date(2014, 0, 21) }\r\n *   )\r\n *   ```\r\n *\r\n * @param {Interval} intervalLeft - the first interval to compare. See [Interval]{@link https://date-fns.org/docs/Interval}\r\n * @param {Interval} intervalRight - the second interval to compare. See [Interval]{@link https://date-fns.org/docs/Interval}\r\n * @param {Object} [options] - the object with options\r\n * @param {Boolean} [options.inclusive=false] - whether the comparison is inclusive or not\r\n * @returns {Boolean} whether the time intervals are overlapping\r\n * @throws {TypeError} 2 arguments required\r\n * @throws {RangeError} The start of an interval cannot be after its end\r\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\r\n *\r\n * @example\r\n * // For overlapping time intervals:\r\n * areIntervalsOverlapping(\r\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\r\n *   { start: new Date(2014, 0, 17), end: new Date(2014, 0, 21) }\r\n * )\r\n * //=> true\r\n *\r\n * @example\r\n * // For non-overlapping time intervals:\r\n * areIntervalsOverlapping(\r\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\r\n *   { start: new Date(2014, 0, 21), end: new Date(2014, 0, 22) }\r\n * )\r\n * //=> false\r\n *\r\n * @example\r\n * // For adjacent time intervals:\r\n * areIntervalsOverlapping(\r\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\r\n *   { start: new Date(2014, 0, 20), end: new Date(2014, 0, 30) }\r\n * )\r\n * //=> false\r\n *\r\n * @example\r\n * // Using the inclusive option:\r\n * areIntervalsOverlapping(\r\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\r\n *   { start: new Date(2014, 0, 20), end: new Date(2014, 0, 24) }\r\n * )\r\n * //=> false\r\n * areIntervalsOverlapping(\r\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\r\n *   { start: new Date(2014, 0, 20), end: new Date(2014, 0, 24) },\r\n *   { inclusive: true }\r\n * )\r\n * //=> true\r\n */\n\nexport default function areIntervalsOverlapping(dirtyIntervalLeft, dirtyIntervalRight) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    inclusive: false\n  };\n  requiredArgs(2, arguments);\n  var intervalLeft = dirtyIntervalLeft || {};\n  var intervalRight = dirtyIntervalRight || {};\n  var leftStartTime = toDate(intervalLeft.start).getTime();\n  var leftEndTime = toDate(intervalLeft.end).getTime();\n  var rightStartTime = toDate(intervalRight.start).getTime();\n  var rightEndTime = toDate(intervalRight.end).getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`\n\n  if (!(leftStartTime <= leftEndTime && rightStartTime <= rightEndTime)) {\n    throw new RangeError('Invalid interval');\n  }\n\n  if (options.inclusive) {\n    return leftStartTime <= rightEndTime && rightStartTime <= leftEndTime;\n  }\n\n  return leftStartTime < rightEndTime && rightStartTime < leftEndTime;\n}","map":{"version":3,"sources":["C:/Users/thero/OneDrive/Documents/factory-management/factory-management/factory-managment-frontend/node_modules/date-fns/esm/areIntervalsOverlapping/index.js"],"names":["toDate","requiredArgs","areIntervalsOverlapping","dirtyIntervalLeft","dirtyIntervalRight","options","arguments","length","undefined","inclusive","intervalLeft","intervalRight","leftStartTime","start","getTime","leftEndTime","end","rightStartTime","rightEndTime","RangeError"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,oBAAnB;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,uBAAT,CAAiCC,iBAAjC,EAAoDC,kBAApD,EAAwE;AACrF,MAAIC,OAAO,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE;AAChFG,IAAAA,SAAS,EAAE;AADqE,GAAlF;AAGAR,EAAAA,YAAY,CAAC,CAAD,EAAIK,SAAJ,CAAZ;AACA,MAAII,YAAY,GAAGP,iBAAiB,IAAI,EAAxC;AACA,MAAIQ,aAAa,GAAGP,kBAAkB,IAAI,EAA1C;AACA,MAAIQ,aAAa,GAAGZ,MAAM,CAACU,YAAY,CAACG,KAAd,CAAN,CAA2BC,OAA3B,EAApB;AACA,MAAIC,WAAW,GAAGf,MAAM,CAACU,YAAY,CAACM,GAAd,CAAN,CAAyBF,OAAzB,EAAlB;AACA,MAAIG,cAAc,GAAGjB,MAAM,CAACW,aAAa,CAACE,KAAf,CAAN,CAA4BC,OAA5B,EAArB;AACA,MAAII,YAAY,GAAGlB,MAAM,CAACW,aAAa,CAACK,GAAf,CAAN,CAA0BF,OAA1B,EAAnB,CAVqF,CAU7B;;AAExD,MAAI,EAAEF,aAAa,IAAIG,WAAjB,IAAgCE,cAAc,IAAIC,YAApD,CAAJ,EAAuE;AACrE,UAAM,IAAIC,UAAJ,CAAe,kBAAf,CAAN;AACD;;AAED,MAAId,OAAO,CAACI,SAAZ,EAAuB;AACrB,WAAOG,aAAa,IAAIM,YAAjB,IAAiCD,cAAc,IAAIF,WAA1D;AACD;;AAED,SAAOH,aAAa,GAAGM,YAAhB,IAAgCD,cAAc,GAAGF,WAAxD;AACD","sourcesContent":["import toDate from \"../toDate/index.js\";\r\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\r\n/**\r\n * @name areIntervalsOverlapping\r\n * @category Interval Helpers\r\n * @summary Is the given time interval overlapping with another time interval?\r\n *\r\n * @description\r\n * Is the given time interval overlapping with another time interval? Adjacent intervals do not count as overlapping.\r\n *\r\n * ### v2.0.0 breaking changes:\r\n *\r\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\r\n *\r\n * - The function was renamed from `areRangesOverlapping` to `areIntervalsOverlapping`.\r\n *   This change was made to mirror the use of the word \"interval\" in standard ISO 8601:2004 terminology:\r\n *\r\n *   ```\r\n *   2.1.3\r\n *   time interval\r\n *   part of the time axis limited by two instants\r\n *   ```\r\n *\r\n *   Also, this function now accepts an object with `start` and `end` properties\r\n *   instead of two arguments as an interval.\r\n *   This function now throws `RangeError` if the start of the interval is after its end\r\n *   or if any date in the interval is `Invalid Date`.\r\n *\r\n *   ```javascript\r\n *   // Before v2.0.0\r\n *\r\n *   areRangesOverlapping(\r\n *     new Date(2014, 0, 10), new Date(2014, 0, 20),\r\n *     new Date(2014, 0, 17), new Date(2014, 0, 21)\r\n *   )\r\n *\r\n *   // v2.0.0 onward\r\n *\r\n *   areIntervalsOverlapping(\r\n *     { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\r\n *     { start: new Date(2014, 0, 17), end: new Date(2014, 0, 21) }\r\n *   )\r\n *   ```\r\n *\r\n * @param {Interval} intervalLeft - the first interval to compare. See [Interval]{@link https://date-fns.org/docs/Interval}\r\n * @param {Interval} intervalRight - the second interval to compare. See [Interval]{@link https://date-fns.org/docs/Interval}\r\n * @param {Object} [options] - the object with options\r\n * @param {Boolean} [options.inclusive=false] - whether the comparison is inclusive or not\r\n * @returns {Boolean} whether the time intervals are overlapping\r\n * @throws {TypeError} 2 arguments required\r\n * @throws {RangeError} The start of an interval cannot be after its end\r\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\r\n *\r\n * @example\r\n * // For overlapping time intervals:\r\n * areIntervalsOverlapping(\r\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\r\n *   { start: new Date(2014, 0, 17), end: new Date(2014, 0, 21) }\r\n * )\r\n * //=> true\r\n *\r\n * @example\r\n * // For non-overlapping time intervals:\r\n * areIntervalsOverlapping(\r\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\r\n *   { start: new Date(2014, 0, 21), end: new Date(2014, 0, 22) }\r\n * )\r\n * //=> false\r\n *\r\n * @example\r\n * // For adjacent time intervals:\r\n * areIntervalsOverlapping(\r\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\r\n *   { start: new Date(2014, 0, 20), end: new Date(2014, 0, 30) }\r\n * )\r\n * //=> false\r\n *\r\n * @example\r\n * // Using the inclusive option:\r\n * areIntervalsOverlapping(\r\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\r\n *   { start: new Date(2014, 0, 20), end: new Date(2014, 0, 24) }\r\n * )\r\n * //=> false\r\n * areIntervalsOverlapping(\r\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\r\n *   { start: new Date(2014, 0, 20), end: new Date(2014, 0, 24) },\r\n *   { inclusive: true }\r\n * )\r\n * //=> true\r\n */\r\n\r\nexport default function areIntervalsOverlapping(dirtyIntervalLeft, dirtyIntervalRight) {\r\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\r\n    inclusive: false\r\n  };\r\n  requiredArgs(2, arguments);\r\n  var intervalLeft = dirtyIntervalLeft || {};\r\n  var intervalRight = dirtyIntervalRight || {};\r\n  var leftStartTime = toDate(intervalLeft.start).getTime();\r\n  var leftEndTime = toDate(intervalLeft.end).getTime();\r\n  var rightStartTime = toDate(intervalRight.start).getTime();\r\n  var rightEndTime = toDate(intervalRight.end).getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`\r\n\r\n  if (!(leftStartTime <= leftEndTime && rightStartTime <= rightEndTime)) {\r\n    throw new RangeError('Invalid interval');\r\n  }\r\n\r\n  if (options.inclusive) {\r\n    return leftStartTime <= rightEndTime && rightStartTime <= leftEndTime;\r\n  }\r\n\r\n  return leftStartTime < rightEndTime && rightStartTime < leftEndTime;\r\n}"]},"metadata":{},"sourceType":"module"}