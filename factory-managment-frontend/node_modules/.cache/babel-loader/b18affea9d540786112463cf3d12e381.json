{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resetState = resetState;\nexports.log = log;\nvar htmlClassList = {};\nvar docBodyClassList = {};\n/* eslint-disable no-console */\n\n/* istanbul ignore next */\n\nfunction removeClass(at, cls) {\n  at.classList.remove(cls);\n}\n/* istanbul ignore next */\n\n\nfunction resetState() {\n  var htmlElement = document.getElementsByTagName(\"html\")[0];\n\n  for (var cls in htmlClassList) {\n    removeClass(htmlElement, htmlClassList[cls]);\n  }\n\n  var body = document.body;\n\n  for (var _cls in docBodyClassList) {\n    removeClass(body, docBodyClassList[_cls]);\n  }\n\n  htmlClassList = {};\n  docBodyClassList = {};\n}\n/* istanbul ignore next */\n\n\nfunction log() {\n  if (process.env.NODE_ENV === \"production\") return;\n  var classes = document.getElementsByTagName(\"html\")[0].className;\n  var buffer = \"Show tracked classes:\\n\\n\";\n  buffer += \"<html /> (\" + classes + \"):\\n\";\n\n  for (var x in htmlClassList) {\n    buffer += \"  \" + x + \" \" + htmlClassList[x] + \"\\n\";\n  }\n\n  classes = document.body.className;\n  buffer += \"\\n\\ndoc.body (\" + classes + \"):\\n\";\n\n  for (var _x in docBodyClassList) {\n    buffer += \"  \" + _x + \" \" + docBodyClassList[_x] + \"\\n\";\n  }\n\n  buffer += \"\\n\";\n  console.log(buffer);\n}\n/* eslint-enable no-console */\n\n/**\r\n * Track the number of reference of a class.\r\n * @param {object} poll The poll to receive the reference.\r\n * @param {string} className The class name.\r\n * @return {string}\r\n */\n\n\nvar incrementReference = function incrementReference(poll, className) {\n  if (!poll[className]) {\n    poll[className] = 0;\n  }\n\n  poll[className] += 1;\n  return className;\n};\n/**\r\n * Drop the reference of a class.\r\n * @param {object} poll The poll to receive the reference.\r\n * @param {string} className The class name.\r\n * @return {string}\r\n */\n\n\nvar decrementReference = function decrementReference(poll, className) {\n  if (poll[className]) {\n    poll[className] -= 1;\n  }\n\n  return className;\n};\n/**\r\n * Track a class and add to the given class list.\r\n * @param {Object} classListRef A class list of an element.\r\n * @param {Object} poll         The poll to be used.\r\n * @param {Array}  classes      The list of classes to be tracked.\r\n */\n\n\nvar trackClass = function trackClass(classListRef, poll, classes) {\n  classes.forEach(function (className) {\n    incrementReference(poll, className);\n    classListRef.add(className);\n  });\n};\n/**\r\n * Untrack a class and remove from the given class list if the reference\r\n * reaches 0.\r\n * @param {Object} classListRef A class list of an element.\r\n * @param {Object} poll         The poll to be used.\r\n * @param {Array}  classes      The list of classes to be untracked.\r\n */\n\n\nvar untrackClass = function untrackClass(classListRef, poll, classes) {\n  classes.forEach(function (className) {\n    decrementReference(poll, className);\n    poll[className] === 0 && classListRef.remove(className);\n  });\n};\n/**\r\n * Public inferface to add classes to the document.body.\r\n * @param {string} bodyClass The class string to be added.\r\n *                           It may contain more then one class\r\n *                           with ' ' as separator.\r\n */\n\n\nvar add = exports.add = function add(element, classString) {\n  return trackClass(element.classList, element.nodeName.toLowerCase() == \"html\" ? htmlClassList : docBodyClassList, classString.split(\" \"));\n};\n/**\r\n * Public inferface to remove classes from the document.body.\r\n * @param {string} bodyClass The class string to be added.\r\n *                           It may contain more then one class\r\n *                           with ' ' as separator.\r\n */\n\n\nvar remove = exports.remove = function remove(element, classString) {\n  return untrackClass(element.classList, element.nodeName.toLowerCase() == \"html\" ? htmlClassList : docBodyClassList, classString.split(\" \"));\n};","map":{"version":3,"sources":["C:/Users/thero/OneDrive/Documents/factory-management/factory-management/factory-managment-frontend/node_modules/react-modal/lib/helpers/classList.js"],"names":["Object","defineProperty","exports","value","resetState","log","htmlClassList","docBodyClassList","removeClass","at","cls","classList","remove","htmlElement","document","getElementsByTagName","body","_cls","process","env","NODE_ENV","classes","className","buffer","x","_x","console","incrementReference","poll","decrementReference","trackClass","classListRef","forEach","add","untrackClass","element","classString","nodeName","toLowerCase","split"],"mappings":"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","sourcesContent":["\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.resetState = resetState;\r\nexports.log = log;\r\nvar htmlClassList = {};\r\nvar docBodyClassList = {};\r\n\r\n/* eslint-disable no-console */\r\n/* istanbul ignore next */\r\nfunction removeClass(at, cls) {\r\n  at.classList.remove(cls);\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction resetState() {\r\n  var htmlElement = document.getElementsByTagName(\"html\")[0];\r\n  for (var cls in htmlClassList) {\r\n    removeClass(htmlElement, htmlClassList[cls]);\r\n  }\r\n\r\n  var body = document.body;\r\n  for (var _cls in docBodyClassList) {\r\n    removeClass(body, docBodyClassList[_cls]);\r\n  }\r\n\r\n  htmlClassList = {};\r\n  docBodyClassList = {};\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction log() {\r\n  if (process.env.NODE_ENV === \"production\") return;\r\n\r\n  var classes = document.getElementsByTagName(\"html\")[0].className;\r\n  var buffer = \"Show tracked classes:\\n\\n\";\r\n\r\n  buffer += \"<html /> (\" + classes + \"):\\n\";\r\n  for (var x in htmlClassList) {\r\n    buffer += \"  \" + x + \" \" + htmlClassList[x] + \"\\n\";\r\n  }\r\n\r\n  classes = document.body.className;\r\n\r\n  buffer += \"\\n\\ndoc.body (\" + classes + \"):\\n\";\r\n  for (var _x in docBodyClassList) {\r\n    buffer += \"  \" + _x + \" \" + docBodyClassList[_x] + \"\\n\";\r\n  }\r\n\r\n  buffer += \"\\n\";\r\n\r\n  console.log(buffer);\r\n}\r\n/* eslint-enable no-console */\r\n\r\n/**\r\n * Track the number of reference of a class.\r\n * @param {object} poll The poll to receive the reference.\r\n * @param {string} className The class name.\r\n * @return {string}\r\n */\r\nvar incrementReference = function incrementReference(poll, className) {\r\n  if (!poll[className]) {\r\n    poll[className] = 0;\r\n  }\r\n  poll[className] += 1;\r\n  return className;\r\n};\r\n\r\n/**\r\n * Drop the reference of a class.\r\n * @param {object} poll The poll to receive the reference.\r\n * @param {string} className The class name.\r\n * @return {string}\r\n */\r\nvar decrementReference = function decrementReference(poll, className) {\r\n  if (poll[className]) {\r\n    poll[className] -= 1;\r\n  }\r\n  return className;\r\n};\r\n\r\n/**\r\n * Track a class and add to the given class list.\r\n * @param {Object} classListRef A class list of an element.\r\n * @param {Object} poll         The poll to be used.\r\n * @param {Array}  classes      The list of classes to be tracked.\r\n */\r\nvar trackClass = function trackClass(classListRef, poll, classes) {\r\n  classes.forEach(function (className) {\r\n    incrementReference(poll, className);\r\n    classListRef.add(className);\r\n  });\r\n};\r\n\r\n/**\r\n * Untrack a class and remove from the given class list if the reference\r\n * reaches 0.\r\n * @param {Object} classListRef A class list of an element.\r\n * @param {Object} poll         The poll to be used.\r\n * @param {Array}  classes      The list of classes to be untracked.\r\n */\r\nvar untrackClass = function untrackClass(classListRef, poll, classes) {\r\n  classes.forEach(function (className) {\r\n    decrementReference(poll, className);\r\n    poll[className] === 0 && classListRef.remove(className);\r\n  });\r\n};\r\n\r\n/**\r\n * Public inferface to add classes to the document.body.\r\n * @param {string} bodyClass The class string to be added.\r\n *                           It may contain more then one class\r\n *                           with ' ' as separator.\r\n */\r\nvar add = exports.add = function add(element, classString) {\r\n  return trackClass(element.classList, element.nodeName.toLowerCase() == \"html\" ? htmlClassList : docBodyClassList, classString.split(\" \"));\r\n};\r\n\r\n/**\r\n * Public inferface to remove classes from the document.body.\r\n * @param {string} bodyClass The class string to be added.\r\n *                           It may contain more then one class\r\n *                           with ' ' as separator.\r\n */\r\nvar remove = exports.remove = function remove(element, classString) {\r\n  return untrackClass(element.classList, element.nodeName.toLowerCase() == \"html\" ? htmlClassList : docBodyClassList, classString.split(\" \"));\r\n};"]},"metadata":{},"sourceType":"script"}