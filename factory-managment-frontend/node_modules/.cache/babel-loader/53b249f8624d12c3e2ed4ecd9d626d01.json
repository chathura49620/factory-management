{"ast":null,"code":"// services/reportGenerator.js\nimport jsPDF from \"jspdf\";\nimport \"jspdf-autotable\"; // Date Fns is used to format the dates we receive\n// from our API call\n\nimport { format } from \"date-fns\"; // define a generatePDF function that accepts a tickets argument\n\nconst GenarateSalesReport = tickets => {\n  console.log(tickets); // initialize jsPDF\n\n  const doc = new jsPDF(); // define the columns we want and their titles\n\n  const tableColumn = [\"Id\", \"Bill No\", \"Bill Type\", \"Amount\", \"Date\"]; // define an empty array of rows\n\n  const tableRows = []; // for each ticket pass all its data into an array\n\n  tickets.forEach(ticket => {\n    const ticketData = [ticket.id, ticket.title, ticket.request, ticket.status // called date-fns to format the date on the ticket\n    //   format(new Date(), \"yyyy-MM-dd\")\n    ]; // push each tickcet's info into a row\n\n    tableRows.push(ticketData);\n    console.log(ticketData);\n  }); // startY is basically margin-top\n\n  doc.autoTable(tableColumn, tableRows, {\n    startY: 20\n  });\n  const date = Date().split(\" \"); // we use a date string to generate our filename.\n\n  const dateStr = date[0] + date[1] + date[2] + date[3] + date[4]; // ticket title. and margin-top + margin-left\n\n  doc.text(\"Closed tickets within the last one month.\", 14, 15); // we define the name of our PDF file.\n\n  doc.save(`report_${dateStr}.pdf`);\n};\n\n_c = GenarateSalesReport;\nexport default GenarateSalesReport;\n\nvar _c;\n\n$RefreshReg$(_c, \"GenarateSalesReport\");","map":{"version":3,"sources":["/home/prabath/Documents/SLiit Projects/factory-management/factory-managment-frontend/src/pages/FinanceTeamMember/services/GenarateSalesReport.js"],"names":["jsPDF","format","GenarateSalesReport","tickets","console","log","doc","tableColumn","tableRows","forEach","ticket","ticketData","id","title","request","status","push","autoTable","startY","date","Date","split","dateStr","text","save"],"mappings":"AAAA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,iBAAP,C,CACA;AACA;;AACA,SAASC,MAAT,QAAuB,UAAvB,C,CAEA;;AACA,MAAMC,mBAAmB,GAAGC,OAAO,IAAI;AACnCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ,EADmC,CAErC;;AACA,QAAMG,GAAG,GAAG,IAAIN,KAAJ,EAAZ,CAHqC,CAKrC;;AACA,QAAMO,WAAW,GAAG,CAAC,IAAD,EAAO,SAAP,EAAkB,WAAlB,EAA+B,QAA/B,EAAyC,MAAzC,CAApB,CANqC,CAOrC;;AACA,QAAMC,SAAS,GAAG,EAAlB,CARqC,CAUrC;;AACAL,EAAAA,OAAO,CAACM,OAAR,CAAgBC,MAAM,IAAI;AACxB,UAAMC,UAAU,GAAG,CACjBD,MAAM,CAACE,EADU,EAEjBF,MAAM,CAACG,KAFU,EAGjBH,MAAM,CAACI,OAHU,EAIjBJ,MAAM,CAACK,MAJU,CAKjB;AACF;AANmB,KAAnB,CADwB,CASxB;;AACAP,IAAAA,SAAS,CAACQ,IAAV,CAAeL,UAAf;AACAP,IAAAA,OAAO,CAACC,GAAR,CAAYM,UAAZ;AACD,GAZD,EAXqC,CA0BrC;;AACAL,EAAAA,GAAG,CAACW,SAAJ,CAAcV,WAAd,EAA2BC,SAA3B,EAAsC;AAAEU,IAAAA,MAAM,EAAE;AAAV,GAAtC;AACA,QAAMC,IAAI,GAAGC,IAAI,GAAGC,KAAP,CAAa,GAAb,CAAb,CA5BqC,CA6BrC;;AACA,QAAMC,OAAO,GAAGH,IAAI,CAAC,CAAD,CAAJ,GAAUA,IAAI,CAAC,CAAD,CAAd,GAAoBA,IAAI,CAAC,CAAD,CAAxB,GAA8BA,IAAI,CAAC,CAAD,CAAlC,GAAwCA,IAAI,CAAC,CAAD,CAA5D,CA9BqC,CA+BrC;;AACAb,EAAAA,GAAG,CAACiB,IAAJ,CAAS,2CAAT,EAAsD,EAAtD,EAA0D,EAA1D,EAhCqC,CAiCrC;;AACAjB,EAAAA,GAAG,CAACkB,IAAJ,CAAU,UAASF,OAAQ,MAA3B;AACD,CAnCD;;KAAMpB,mB;AAqCN,eAAeA,mBAAf","sourcesContent":["// services/reportGenerator.js\n\nimport jsPDF from \"jspdf\"; \nimport \"jspdf-autotable\";\n// Date Fns is used to format the dates we receive\n// from our API call\nimport { format } from \"date-fns\";\n\n// define a generatePDF function that accepts a tickets argument\nconst GenarateSalesReport = tickets => {\n    console.log(tickets);\n  // initialize jsPDF\n  const doc = new jsPDF();\n\n  // define the columns we want and their titles\n  const tableColumn = [\"Id\", \"Bill No\", \"Bill Type\", \"Amount\", \"Date\"];\n  // define an empty array of rows\n  const tableRows = [];\n\n  // for each ticket pass all its data into an array\n  tickets.forEach(ticket => {\n    const ticketData = [\n      ticket.id,\n      ticket.title,\n      ticket.request,\n      ticket.status,\n      // called date-fns to format the date on the ticket\n    //   format(new Date(), \"yyyy-MM-dd\")\n    ];\n    // push each tickcet's info into a row\n    tableRows.push(ticketData);\n    console.log(ticketData);\n  });\n  \n\n  // startY is basically margin-top\n  doc.autoTable(tableColumn, tableRows, { startY: 20 });\n  const date = Date().split(\" \");\n  // we use a date string to generate our filename.\n  const dateStr = date[0] + date[1] + date[2] + date[3] + date[4];\n  // ticket title. and margin-top + margin-left\n  doc.text(\"Closed tickets within the last one month.\", 14, 15);\n  // we define the name of our PDF file.\n  doc.save(`report_${dateStr}.pdf`);\n};\n\nexport default GenarateSalesReport;"]},"metadata":{},"sourceType":"module"}