{"ast":null,"code":"import getTimezoneOffsetInMilliseconds from \"../_lib/getTimezoneOffsetInMilliseconds/index.js\";\nimport compareAsc from \"../compareAsc/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport cloneObject from \"../_lib/cloneObject/index.js\";\nimport defaultLocale from \"../locale/en-US/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nvar MILLISECONDS_IN_MINUTE = 1000 * 60;\nvar MINUTES_IN_DAY = 60 * 24;\nvar MINUTES_IN_MONTH = MINUTES_IN_DAY * 30;\nvar MINUTES_IN_YEAR = MINUTES_IN_DAY * 365;\n/**\r\n * @name formatDistanceStrict\r\n * @category Common Helpers\r\n * @summary Return the distance between the given dates in words.\r\n *\r\n * @description\r\n * Return the distance between the given dates in words, using strict units.\r\n * This is like `formatDistance`, but does not use helpers like 'almost', 'over',\r\n * 'less than' and the like.\r\n *\r\n * | Distance between dates | Result              |\r\n * |------------------------|---------------------|\r\n * | 0 ... 59 secs          | [0..59] seconds     |\r\n * | 1 ... 59 mins          | [1..59] minutes     |\r\n * | 1 ... 23 hrs           | [1..23] hours       |\r\n * | 1 ... 29 days          | [1..29] days        |\r\n * | 1 ... 11 months        | [1..11] months      |\r\n * | 1 ... N years          | [1..N]  years       |\r\n *\r\n * ### v2.0.0 breaking changes:\r\n *\r\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\r\n *\r\n * - The function was renamed from `distanceInWordsStrict` to `formatDistanceStrict`\r\n *   to make its name consistent with `format` and `formatRelative`.\r\n *\r\n * - The order of arguments is swapped to make the function\r\n *   consistent with `differenceIn...` functions.\r\n *\r\n *   ```javascript\r\n *   // Before v2.0.0\r\n *\r\n *   distanceInWordsStrict(\r\n *     new Date(2015, 0, 2),\r\n *     new Date(2014, 6, 2)\r\n *   ) //=> '6 months'\r\n *\r\n *   // v2.0.0 onward\r\n *\r\n *   formatDistanceStrict(\r\n *     new Date(2014, 6, 2),\r\n *     new Date(2015, 0, 2)\r\n *   ) //=> '6 months'\r\n *   ```\r\n *\r\n * - `partialMethod` option is renamed to `roundingMethod`.\r\n *\r\n *   ```javascript\r\n *   // Before v2.0.0\r\n *\r\n *   distanceInWordsStrict(\r\n *     new Date(1986, 3, 4, 10, 32, 0),\r\n *     new Date(1986, 3, 4, 10, 33, 1),\r\n *     { partialMethod: 'ceil' }\r\n *   ) //=> '2 minutes'\r\n *\r\n *   // v2.0.0 onward\r\n *\r\n *   formatDistanceStrict(\r\n *     new Date(1986, 3, 4, 10, 33, 1),\r\n *     new Date(1986, 3, 4, 10, 32, 0),\r\n *     { roundingMethod: 'ceil' }\r\n *   ) //=> '2 minutes'\r\n *   ```\r\n *\r\n * - If `roundingMethod` is not specified, it now defaults to `round` instead of `floor`.\r\n *\r\n * - `unit` option now accepts one of the strings:\r\n *   'second', 'minute', 'hour', 'day', 'month' or 'year' instead of 's', 'm', 'h', 'd', 'M' or 'Y'\r\n *\r\n *   ```javascript\r\n *   // Before v2.0.0\r\n *\r\n *   distanceInWordsStrict(\r\n *     new Date(1986, 3, 4, 10, 32, 0),\r\n *     new Date(1986, 3, 4, 10, 33, 1),\r\n *     { unit: 'm' }\r\n *   )\r\n *\r\n *   // v2.0.0 onward\r\n *\r\n *   formatDistanceStrict(\r\n *     new Date(1986, 3, 4, 10, 33, 1),\r\n *     new Date(1986, 3, 4, 10, 32, 0),\r\n *     { unit: 'minute' }\r\n *   )\r\n *   ```\r\n *\r\n * @param {Date|Number} date - the date\r\n * @param {Date|Number} baseDate - the date to compare with\r\n * @param {Object} [options] - an object with options.\r\n * @param {Boolean} [options.addSuffix=false] - result indicates if the second date is earlier or later than the first\r\n * @param {'second'|'minute'|'hour'|'day'|'month'|'year'} [options.unit] - if specified, will force a unit\r\n * @param {'floor'|'ceil'|'round'} [options.roundingMethod='round'] - which way to round partial units\r\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\r\n * @returns {String} the distance in words\r\n * @throws {TypeError} 2 arguments required\r\n * @throws {RangeError} `date` must not be Invalid Date\r\n * @throws {RangeError} `baseDate` must not be Invalid Date\r\n * @throws {RangeError} `options.roundingMethod` must be 'floor', 'ceil' or 'round'\r\n * @throws {RangeError} `options.unit` must be 'second', 'minute', 'hour', 'day', 'month' or 'year'\r\n * @throws {RangeError} `options.locale` must contain `formatDistance` property\r\n *\r\n * @example\r\n * // What is the distance between 2 July 2014 and 1 January 2015?\r\n * const result = formatDistanceStrict(new Date(2014, 6, 2), new Date(2015, 0, 2))\r\n * //=> '6 months'\r\n *\r\n * @example\r\n * // What is the distance between 1 January 2015 00:00:15\r\n * // and 1 January 2015 00:00:00?\r\n * const result = formatDistanceStrict(\r\n *   new Date(2015, 0, 1, 0, 0, 15),\r\n *   new Date(2015, 0, 1, 0, 0, 0)\r\n * )\r\n * //=> '15 seconds'\r\n *\r\n * @example\r\n * // What is the distance from 1 January 2016\r\n * // to 1 January 2015, with a suffix?\r\n * const result = formatDistanceStrict(new Date(2015, 0, 1), new Date(2016, 0, 1), {\r\n *   addSuffix: true\r\n * })\r\n * //=> '1 year ago'\r\n *\r\n * @example\r\n * // What is the distance from 1 January 2016\r\n * // to 1 January 2015, in minutes?\r\n * const result = formatDistanceStrict(new Date(2016, 0, 1), new Date(2015, 0, 1), {\r\n *   unit: 'minute'\r\n * })\r\n * //=> '525600 minutes'\r\n *\r\n * @example\r\n * // What is the distance from 1 January 2015\r\n * // to 28 January 2015, in months, rounded up?\r\n * const result = formatDistanceStrict(new Date(2015, 0, 28), new Date(2015, 0, 1), {\r\n *   unit: 'month',\r\n *   roundingMethod: 'ceil'\r\n * })\r\n * //=> '1 month'\r\n *\r\n * @example\r\n * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?\r\n * import { eoLocale } from 'date-fns/locale/eo'\r\n * const result = formatDistanceStrict(new Date(2016, 7, 1), new Date(2015, 0, 1), {\r\n *   locale: eoLocale\r\n * })\r\n * //=> '1 jaro'\r\n */\n\nexport default function formatDistanceStrict(dirtyDate, dirtyBaseDate) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  requiredArgs(2, arguments);\n  var locale = options.locale || defaultLocale;\n\n  if (!locale.formatDistance) {\n    throw new RangeError('locale must contain localize.formatDistance property');\n  }\n\n  var comparison = compareAsc(dirtyDate, dirtyBaseDate);\n\n  if (isNaN(comparison)) {\n    throw new RangeError('Invalid time value');\n  }\n\n  var localizeOptions = cloneObject(options);\n  localizeOptions.addSuffix = Boolean(options.addSuffix);\n  localizeOptions.comparison = comparison;\n  var dateLeft;\n  var dateRight;\n\n  if (comparison > 0) {\n    dateLeft = toDate(dirtyBaseDate);\n    dateRight = toDate(dirtyDate);\n  } else {\n    dateLeft = toDate(dirtyDate);\n    dateRight = toDate(dirtyBaseDate);\n  }\n\n  var roundingMethod = options.roundingMethod == null ? 'round' : String(options.roundingMethod);\n  var roundingMethodFn;\n\n  if (roundingMethod === 'floor') {\n    roundingMethodFn = Math.floor;\n  } else if (roundingMethod === 'ceil') {\n    roundingMethodFn = Math.ceil;\n  } else if (roundingMethod === 'round') {\n    roundingMethodFn = Math.round;\n  } else {\n    throw new RangeError(\"roundingMethod must be 'floor', 'ceil' or 'round'\");\n  }\n\n  var milliseconds = dateRight.getTime() - dateLeft.getTime();\n  var minutes = milliseconds / MILLISECONDS_IN_MINUTE;\n  var timezoneOffset = getTimezoneOffsetInMilliseconds(dateRight) - getTimezoneOffsetInMilliseconds(dateLeft); // Use DST-normalized difference in minutes for years, months and days;\n  // use regular difference in minutes for hours, minutes and seconds.\n\n  var dstNormalizedMinutes = (milliseconds - timezoneOffset) / MILLISECONDS_IN_MINUTE;\n  var unit;\n\n  if (options.unit == null) {\n    if (minutes < 1) {\n      unit = 'second';\n    } else if (minutes < 60) {\n      unit = 'minute';\n    } else if (minutes < MINUTES_IN_DAY) {\n      unit = 'hour';\n    } else if (dstNormalizedMinutes < MINUTES_IN_MONTH) {\n      unit = 'day';\n    } else if (dstNormalizedMinutes < MINUTES_IN_YEAR) {\n      unit = 'month';\n    } else {\n      unit = 'year';\n    }\n  } else {\n    unit = String(options.unit);\n  } // 0 up to 60 seconds\n\n\n  if (unit === 'second') {\n    var seconds = roundingMethodFn(milliseconds / 1000);\n    return locale.formatDistance('xSeconds', seconds, localizeOptions); // 1 up to 60 mins\n  } else if (unit === 'minute') {\n    var roundedMinutes = roundingMethodFn(minutes);\n    return locale.formatDistance('xMinutes', roundedMinutes, localizeOptions); // 1 up to 24 hours\n  } else if (unit === 'hour') {\n    var hours = roundingMethodFn(minutes / 60);\n    return locale.formatDistance('xHours', hours, localizeOptions); // 1 up to 30 days\n  } else if (unit === 'day') {\n    var days = roundingMethodFn(dstNormalizedMinutes / MINUTES_IN_DAY);\n    return locale.formatDistance('xDays', days, localizeOptions); // 1 up to 12 months\n  } else if (unit === 'month') {\n    var months = roundingMethodFn(dstNormalizedMinutes / MINUTES_IN_MONTH);\n    return months === 12 && options.unit !== 'month' ? locale.formatDistance('xYears', 1, localizeOptions) : locale.formatDistance('xMonths', months, localizeOptions); // 1 year up to max Date\n  } else if (unit === 'year') {\n    var years = roundingMethodFn(dstNormalizedMinutes / MINUTES_IN_YEAR);\n    return locale.formatDistance('xYears', years, localizeOptions);\n  }\n\n  throw new RangeError(\"unit must be 'second', 'minute', 'hour', 'day', 'month' or 'year'\");\n}","map":{"version":3,"sources":["C:/Users/thero/OneDrive/Documents/factory-management/factory-management/factory-managment-frontend/node_modules/date-fns/esm/formatDistanceStrict/index.js"],"names":["getTimezoneOffsetInMilliseconds","compareAsc","toDate","cloneObject","defaultLocale","requiredArgs","MILLISECONDS_IN_MINUTE","MINUTES_IN_DAY","MINUTES_IN_MONTH","MINUTES_IN_YEAR","formatDistanceStrict","dirtyDate","dirtyBaseDate","options","arguments","length","undefined","locale","formatDistance","RangeError","comparison","isNaN","localizeOptions","addSuffix","Boolean","dateLeft","dateRight","roundingMethod","String","roundingMethodFn","Math","floor","ceil","round","milliseconds","getTime","minutes","timezoneOffset","dstNormalizedMinutes","unit","seconds","roundedMinutes","hours","days","months","years"],"mappings":"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","sourcesContent":["import getTimezoneOffsetInMilliseconds from \"../_lib/getTimezoneOffsetInMilliseconds/index.js\";\r\nimport compareAsc from \"../compareAsc/index.js\";\r\nimport toDate from \"../toDate/index.js\";\r\nimport cloneObject from \"../_lib/cloneObject/index.js\";\r\nimport defaultLocale from \"../locale/en-US/index.js\";\r\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\r\nvar MILLISECONDS_IN_MINUTE = 1000 * 60;\r\nvar MINUTES_IN_DAY = 60 * 24;\r\nvar MINUTES_IN_MONTH = MINUTES_IN_DAY * 30;\r\nvar MINUTES_IN_YEAR = MINUTES_IN_DAY * 365;\r\n/**\r\n * @name formatDistanceStrict\r\n * @category Common Helpers\r\n * @summary Return the distance between the given dates in words.\r\n *\r\n * @description\r\n * Return the distance between the given dates in words, using strict units.\r\n * This is like `formatDistance`, but does not use helpers like 'almost', 'over',\r\n * 'less than' and the like.\r\n *\r\n * | Distance between dates | Result              |\r\n * |------------------------|---------------------|\r\n * | 0 ... 59 secs          | [0..59] seconds     |\r\n * | 1 ... 59 mins          | [1..59] minutes     |\r\n * | 1 ... 23 hrs           | [1..23] hours       |\r\n * | 1 ... 29 days          | [1..29] days        |\r\n * | 1 ... 11 months        | [1..11] months      |\r\n * | 1 ... N years          | [1..N]  years       |\r\n *\r\n * ### v2.0.0 breaking changes:\r\n *\r\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\r\n *\r\n * - The function was renamed from `distanceInWordsStrict` to `formatDistanceStrict`\r\n *   to make its name consistent with `format` and `formatRelative`.\r\n *\r\n * - The order of arguments is swapped to make the function\r\n *   consistent with `differenceIn...` functions.\r\n *\r\n *   ```javascript\r\n *   // Before v2.0.0\r\n *\r\n *   distanceInWordsStrict(\r\n *     new Date(2015, 0, 2),\r\n *     new Date(2014, 6, 2)\r\n *   ) //=> '6 months'\r\n *\r\n *   // v2.0.0 onward\r\n *\r\n *   formatDistanceStrict(\r\n *     new Date(2014, 6, 2),\r\n *     new Date(2015, 0, 2)\r\n *   ) //=> '6 months'\r\n *   ```\r\n *\r\n * - `partialMethod` option is renamed to `roundingMethod`.\r\n *\r\n *   ```javascript\r\n *   // Before v2.0.0\r\n *\r\n *   distanceInWordsStrict(\r\n *     new Date(1986, 3, 4, 10, 32, 0),\r\n *     new Date(1986, 3, 4, 10, 33, 1),\r\n *     { partialMethod: 'ceil' }\r\n *   ) //=> '2 minutes'\r\n *\r\n *   // v2.0.0 onward\r\n *\r\n *   formatDistanceStrict(\r\n *     new Date(1986, 3, 4, 10, 33, 1),\r\n *     new Date(1986, 3, 4, 10, 32, 0),\r\n *     { roundingMethod: 'ceil' }\r\n *   ) //=> '2 minutes'\r\n *   ```\r\n *\r\n * - If `roundingMethod` is not specified, it now defaults to `round` instead of `floor`.\r\n *\r\n * - `unit` option now accepts one of the strings:\r\n *   'second', 'minute', 'hour', 'day', 'month' or 'year' instead of 's', 'm', 'h', 'd', 'M' or 'Y'\r\n *\r\n *   ```javascript\r\n *   // Before v2.0.0\r\n *\r\n *   distanceInWordsStrict(\r\n *     new Date(1986, 3, 4, 10, 32, 0),\r\n *     new Date(1986, 3, 4, 10, 33, 1),\r\n *     { unit: 'm' }\r\n *   )\r\n *\r\n *   // v2.0.0 onward\r\n *\r\n *   formatDistanceStrict(\r\n *     new Date(1986, 3, 4, 10, 33, 1),\r\n *     new Date(1986, 3, 4, 10, 32, 0),\r\n *     { unit: 'minute' }\r\n *   )\r\n *   ```\r\n *\r\n * @param {Date|Number} date - the date\r\n * @param {Date|Number} baseDate - the date to compare with\r\n * @param {Object} [options] - an object with options.\r\n * @param {Boolean} [options.addSuffix=false] - result indicates if the second date is earlier or later than the first\r\n * @param {'second'|'minute'|'hour'|'day'|'month'|'year'} [options.unit] - if specified, will force a unit\r\n * @param {'floor'|'ceil'|'round'} [options.roundingMethod='round'] - which way to round partial units\r\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\r\n * @returns {String} the distance in words\r\n * @throws {TypeError} 2 arguments required\r\n * @throws {RangeError} `date` must not be Invalid Date\r\n * @throws {RangeError} `baseDate` must not be Invalid Date\r\n * @throws {RangeError} `options.roundingMethod` must be 'floor', 'ceil' or 'round'\r\n * @throws {RangeError} `options.unit` must be 'second', 'minute', 'hour', 'day', 'month' or 'year'\r\n * @throws {RangeError} `options.locale` must contain `formatDistance` property\r\n *\r\n * @example\r\n * // What is the distance between 2 July 2014 and 1 January 2015?\r\n * const result = formatDistanceStrict(new Date(2014, 6, 2), new Date(2015, 0, 2))\r\n * //=> '6 months'\r\n *\r\n * @example\r\n * // What is the distance between 1 January 2015 00:00:15\r\n * // and 1 January 2015 00:00:00?\r\n * const result = formatDistanceStrict(\r\n *   new Date(2015, 0, 1, 0, 0, 15),\r\n *   new Date(2015, 0, 1, 0, 0, 0)\r\n * )\r\n * //=> '15 seconds'\r\n *\r\n * @example\r\n * // What is the distance from 1 January 2016\r\n * // to 1 January 2015, with a suffix?\r\n * const result = formatDistanceStrict(new Date(2015, 0, 1), new Date(2016, 0, 1), {\r\n *   addSuffix: true\r\n * })\r\n * //=> '1 year ago'\r\n *\r\n * @example\r\n * // What is the distance from 1 January 2016\r\n * // to 1 January 2015, in minutes?\r\n * const result = formatDistanceStrict(new Date(2016, 0, 1), new Date(2015, 0, 1), {\r\n *   unit: 'minute'\r\n * })\r\n * //=> '525600 minutes'\r\n *\r\n * @example\r\n * // What is the distance from 1 January 2015\r\n * // to 28 January 2015, in months, rounded up?\r\n * const result = formatDistanceStrict(new Date(2015, 0, 28), new Date(2015, 0, 1), {\r\n *   unit: 'month',\r\n *   roundingMethod: 'ceil'\r\n * })\r\n * //=> '1 month'\r\n *\r\n * @example\r\n * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?\r\n * import { eoLocale } from 'date-fns/locale/eo'\r\n * const result = formatDistanceStrict(new Date(2016, 7, 1), new Date(2015, 0, 1), {\r\n *   locale: eoLocale\r\n * })\r\n * //=> '1 jaro'\r\n */\r\n\r\nexport default function formatDistanceStrict(dirtyDate, dirtyBaseDate) {\r\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\r\n  requiredArgs(2, arguments);\r\n  var locale = options.locale || defaultLocale;\r\n\r\n  if (!locale.formatDistance) {\r\n    throw new RangeError('locale must contain localize.formatDistance property');\r\n  }\r\n\r\n  var comparison = compareAsc(dirtyDate, dirtyBaseDate);\r\n\r\n  if (isNaN(comparison)) {\r\n    throw new RangeError('Invalid time value');\r\n  }\r\n\r\n  var localizeOptions = cloneObject(options);\r\n  localizeOptions.addSuffix = Boolean(options.addSuffix);\r\n  localizeOptions.comparison = comparison;\r\n  var dateLeft;\r\n  var dateRight;\r\n\r\n  if (comparison > 0) {\r\n    dateLeft = toDate(dirtyBaseDate);\r\n    dateRight = toDate(dirtyDate);\r\n  } else {\r\n    dateLeft = toDate(dirtyDate);\r\n    dateRight = toDate(dirtyBaseDate);\r\n  }\r\n\r\n  var roundingMethod = options.roundingMethod == null ? 'round' : String(options.roundingMethod);\r\n  var roundingMethodFn;\r\n\r\n  if (roundingMethod === 'floor') {\r\n    roundingMethodFn = Math.floor;\r\n  } else if (roundingMethod === 'ceil') {\r\n    roundingMethodFn = Math.ceil;\r\n  } else if (roundingMethod === 'round') {\r\n    roundingMethodFn = Math.round;\r\n  } else {\r\n    throw new RangeError(\"roundingMethod must be 'floor', 'ceil' or 'round'\");\r\n  }\r\n\r\n  var milliseconds = dateRight.getTime() - dateLeft.getTime();\r\n  var minutes = milliseconds / MILLISECONDS_IN_MINUTE;\r\n  var timezoneOffset = getTimezoneOffsetInMilliseconds(dateRight) - getTimezoneOffsetInMilliseconds(dateLeft); // Use DST-normalized difference in minutes for years, months and days;\r\n  // use regular difference in minutes for hours, minutes and seconds.\r\n\r\n  var dstNormalizedMinutes = (milliseconds - timezoneOffset) / MILLISECONDS_IN_MINUTE;\r\n  var unit;\r\n\r\n  if (options.unit == null) {\r\n    if (minutes < 1) {\r\n      unit = 'second';\r\n    } else if (minutes < 60) {\r\n      unit = 'minute';\r\n    } else if (minutes < MINUTES_IN_DAY) {\r\n      unit = 'hour';\r\n    } else if (dstNormalizedMinutes < MINUTES_IN_MONTH) {\r\n      unit = 'day';\r\n    } else if (dstNormalizedMinutes < MINUTES_IN_YEAR) {\r\n      unit = 'month';\r\n    } else {\r\n      unit = 'year';\r\n    }\r\n  } else {\r\n    unit = String(options.unit);\r\n  } // 0 up to 60 seconds\r\n\r\n\r\n  if (unit === 'second') {\r\n    var seconds = roundingMethodFn(milliseconds / 1000);\r\n    return locale.formatDistance('xSeconds', seconds, localizeOptions); // 1 up to 60 mins\r\n  } else if (unit === 'minute') {\r\n    var roundedMinutes = roundingMethodFn(minutes);\r\n    return locale.formatDistance('xMinutes', roundedMinutes, localizeOptions); // 1 up to 24 hours\r\n  } else if (unit === 'hour') {\r\n    var hours = roundingMethodFn(minutes / 60);\r\n    return locale.formatDistance('xHours', hours, localizeOptions); // 1 up to 30 days\r\n  } else if (unit === 'day') {\r\n    var days = roundingMethodFn(dstNormalizedMinutes / MINUTES_IN_DAY);\r\n    return locale.formatDistance('xDays', days, localizeOptions); // 1 up to 12 months\r\n  } else if (unit === 'month') {\r\n    var months = roundingMethodFn(dstNormalizedMinutes / MINUTES_IN_MONTH);\r\n    return months === 12 && options.unit !== 'month' ? locale.formatDistance('xYears', 1, localizeOptions) : locale.formatDistance('xMonths', months, localizeOptions); // 1 year up to max Date\r\n  } else if (unit === 'year') {\r\n    var years = roundingMethodFn(dstNormalizedMinutes / MINUTES_IN_YEAR);\r\n    return locale.formatDistance('xYears', years, localizeOptions);\r\n  }\r\n\r\n  throw new RangeError(\"unit must be 'second', 'minute', 'hour', 'day', 'month' or 'year'\");\r\n}"]},"metadata":{},"sourceType":"module"}