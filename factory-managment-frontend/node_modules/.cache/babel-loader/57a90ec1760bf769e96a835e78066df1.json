{"ast":null,"code":"/*\r\n\tBased on rgbcolor.js by Stoyan Stefanov <sstoo@gmail.com>\r\n\thttp://www.phpied.com/rgb-color-parser-in-javascript/\r\n*/\nmodule.exports = function (color_string) {\n  this.ok = false;\n  this.alpha = 1.0; // strip any leading #\n\n  if (color_string.charAt(0) == '#') {\n    // remove # if any\n    color_string = color_string.substr(1, 6);\n  }\n\n  color_string = color_string.replace(/ /g, '');\n  color_string = color_string.toLowerCase(); // before getting into regexps, try simple matches\n  // and overwrite the input\n\n  var simple_colors = {\n    aliceblue: 'f0f8ff',\n    antiquewhite: 'faebd7',\n    aqua: '00ffff',\n    aquamarine: '7fffd4',\n    azure: 'f0ffff',\n    beige: 'f5f5dc',\n    bisque: 'ffe4c4',\n    black: '000000',\n    blanchedalmond: 'ffebcd',\n    blue: '0000ff',\n    blueviolet: '8a2be2',\n    brown: 'a52a2a',\n    burlywood: 'deb887',\n    cadetblue: '5f9ea0',\n    chartreuse: '7fff00',\n    chocolate: 'd2691e',\n    coral: 'ff7f50',\n    cornflowerblue: '6495ed',\n    cornsilk: 'fff8dc',\n    crimson: 'dc143c',\n    cyan: '00ffff',\n    darkblue: '00008b',\n    darkcyan: '008b8b',\n    darkgoldenrod: 'b8860b',\n    darkgray: 'a9a9a9',\n    darkgreen: '006400',\n    darkkhaki: 'bdb76b',\n    darkmagenta: '8b008b',\n    darkolivegreen: '556b2f',\n    darkorange: 'ff8c00',\n    darkorchid: '9932cc',\n    darkred: '8b0000',\n    darksalmon: 'e9967a',\n    darkseagreen: '8fbc8f',\n    darkslateblue: '483d8b',\n    darkslategray: '2f4f4f',\n    darkturquoise: '00ced1',\n    darkviolet: '9400d3',\n    deeppink: 'ff1493',\n    deepskyblue: '00bfff',\n    dimgray: '696969',\n    dodgerblue: '1e90ff',\n    feldspar: 'd19275',\n    firebrick: 'b22222',\n    floralwhite: 'fffaf0',\n    forestgreen: '228b22',\n    fuchsia: 'ff00ff',\n    gainsboro: 'dcdcdc',\n    ghostwhite: 'f8f8ff',\n    gold: 'ffd700',\n    goldenrod: 'daa520',\n    gray: '808080',\n    green: '008000',\n    greenyellow: 'adff2f',\n    honeydew: 'f0fff0',\n    hotpink: 'ff69b4',\n    indianred: 'cd5c5c',\n    indigo: '4b0082',\n    ivory: 'fffff0',\n    khaki: 'f0e68c',\n    lavender: 'e6e6fa',\n    lavenderblush: 'fff0f5',\n    lawngreen: '7cfc00',\n    lemonchiffon: 'fffacd',\n    lightblue: 'add8e6',\n    lightcoral: 'f08080',\n    lightcyan: 'e0ffff',\n    lightgoldenrodyellow: 'fafad2',\n    lightgrey: 'd3d3d3',\n    lightgreen: '90ee90',\n    lightpink: 'ffb6c1',\n    lightsalmon: 'ffa07a',\n    lightseagreen: '20b2aa',\n    lightskyblue: '87cefa',\n    lightslateblue: '8470ff',\n    lightslategray: '778899',\n    lightsteelblue: 'b0c4de',\n    lightyellow: 'ffffe0',\n    lime: '00ff00',\n    limegreen: '32cd32',\n    linen: 'faf0e6',\n    magenta: 'ff00ff',\n    maroon: '800000',\n    mediumaquamarine: '66cdaa',\n    mediumblue: '0000cd',\n    mediumorchid: 'ba55d3',\n    mediumpurple: '9370d8',\n    mediumseagreen: '3cb371',\n    mediumslateblue: '7b68ee',\n    mediumspringgreen: '00fa9a',\n    mediumturquoise: '48d1cc',\n    mediumvioletred: 'c71585',\n    midnightblue: '191970',\n    mintcream: 'f5fffa',\n    mistyrose: 'ffe4e1',\n    moccasin: 'ffe4b5',\n    navajowhite: 'ffdead',\n    navy: '000080',\n    oldlace: 'fdf5e6',\n    olive: '808000',\n    olivedrab: '6b8e23',\n    orange: 'ffa500',\n    orangered: 'ff4500',\n    orchid: 'da70d6',\n    palegoldenrod: 'eee8aa',\n    palegreen: '98fb98',\n    paleturquoise: 'afeeee',\n    palevioletred: 'd87093',\n    papayawhip: 'ffefd5',\n    peachpuff: 'ffdab9',\n    peru: 'cd853f',\n    pink: 'ffc0cb',\n    plum: 'dda0dd',\n    powderblue: 'b0e0e6',\n    purple: '800080',\n    rebeccapurple: '663399',\n    red: 'ff0000',\n    rosybrown: 'bc8f8f',\n    royalblue: '4169e1',\n    saddlebrown: '8b4513',\n    salmon: 'fa8072',\n    sandybrown: 'f4a460',\n    seagreen: '2e8b57',\n    seashell: 'fff5ee',\n    sienna: 'a0522d',\n    silver: 'c0c0c0',\n    skyblue: '87ceeb',\n    slateblue: '6a5acd',\n    slategray: '708090',\n    snow: 'fffafa',\n    springgreen: '00ff7f',\n    steelblue: '4682b4',\n    tan: 'd2b48c',\n    teal: '008080',\n    thistle: 'd8bfd8',\n    tomato: 'ff6347',\n    turquoise: '40e0d0',\n    violet: 'ee82ee',\n    violetred: 'd02090',\n    wheat: 'f5deb3',\n    white: 'ffffff',\n    whitesmoke: 'f5f5f5',\n    yellow: 'ffff00',\n    yellowgreen: '9acd32'\n  };\n  color_string = simple_colors[color_string] || color_string; // emd of simple type-in colors\n  // array of color definition objects\n\n  var color_defs = [{\n    re: /^rgba\\((\\d{1,3}),\\s*(\\d{1,3}),\\s*(\\d{1,3}),\\s*((?:\\d?\\.)?\\d)\\)$/,\n    example: ['rgba(123, 234, 45, 0.8)', 'rgba(255,234,245,1.0)'],\n    process: function (bits) {\n      return [parseInt(bits[1]), parseInt(bits[2]), parseInt(bits[3]), parseFloat(bits[4])];\n    }\n  }, {\n    re: /^rgb\\((\\d{1,3}),\\s*(\\d{1,3}),\\s*(\\d{1,3})\\)$/,\n    example: ['rgb(123, 234, 45)', 'rgb(255,234,245)'],\n    process: function (bits) {\n      return [parseInt(bits[1]), parseInt(bits[2]), parseInt(bits[3])];\n    }\n  }, {\n    re: /^([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\n    example: ['#00ff00', '336699'],\n    process: function (bits) {\n      return [parseInt(bits[1], 16), parseInt(bits[2], 16), parseInt(bits[3], 16)];\n    }\n  }, {\n    re: /^([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n    example: ['#fb0', 'f0f'],\n    process: function (bits) {\n      return [parseInt(bits[1] + bits[1], 16), parseInt(bits[2] + bits[2], 16), parseInt(bits[3] + bits[3], 16)];\n    }\n  }]; // search through the definitions to find a match\n\n  for (var i = 0; i < color_defs.length; i++) {\n    var re = color_defs[i].re;\n    var processor = color_defs[i].process;\n    var bits = re.exec(color_string);\n\n    if (bits) {\n      var channels = processor(bits);\n      this.r = channels[0];\n      this.g = channels[1];\n      this.b = channels[2];\n\n      if (channels.length > 3) {\n        this.alpha = channels[3];\n      }\n\n      this.ok = true;\n    }\n  } // validate/cleanup values\n\n\n  this.r = this.r < 0 || isNaN(this.r) ? 0 : this.r > 255 ? 255 : this.r;\n  this.g = this.g < 0 || isNaN(this.g) ? 0 : this.g > 255 ? 255 : this.g;\n  this.b = this.b < 0 || isNaN(this.b) ? 0 : this.b > 255 ? 255 : this.b;\n  this.alpha = this.alpha < 0 ? 0 : this.alpha > 1.0 || isNaN(this.alpha) ? 1.0 : this.alpha; // some getters\n\n  this.toRGB = function () {\n    return 'rgb(' + this.r + ', ' + this.g + ', ' + this.b + ')';\n  };\n\n  this.toRGBA = function () {\n    return 'rgba(' + this.r + ', ' + this.g + ', ' + this.b + ', ' + this.alpha + ')';\n  };\n\n  this.toHex = function () {\n    var r = this.r.toString(16);\n    var g = this.g.toString(16);\n    var b = this.b.toString(16);\n    if (r.length == 1) r = '0' + r;\n    if (g.length == 1) g = '0' + g;\n    if (b.length == 1) b = '0' + b;\n    return '#' + r + g + b;\n  }; // help\n\n\n  this.getHelpXML = function () {\n    var examples = new Array(); // add regexps\n\n    for (var i = 0; i < color_defs.length; i++) {\n      var example = color_defs[i].example;\n\n      for (var j = 0; j < example.length; j++) {\n        examples[examples.length] = example[j];\n      }\n    } // add type-in colors\n\n\n    for (var sc in simple_colors) {\n      examples[examples.length] = sc;\n    }\n\n    var xml = document.createElement('ul');\n    xml.setAttribute('id', 'rgbcolor-examples');\n\n    for (var i = 0; i < examples.length; i++) {\n      try {\n        var list_item = document.createElement('li');\n        var list_color = new RGBColor(examples[i]);\n        var example_div = document.createElement('div');\n        example_div.style.cssText = 'margin: 3px; ' + 'border: 1px solid black; ' + 'background:' + list_color.toHex() + '; ' + 'color:' + list_color.toHex();\n        example_div.appendChild(document.createTextNode('test'));\n        var list_item_value = document.createTextNode(' ' + examples[i] + ' -> ' + list_color.toRGB() + ' -> ' + list_color.toHex());\n        list_item.appendChild(example_div);\n        list_item.appendChild(list_item_value);\n        xml.appendChild(list_item);\n      } catch (e) {}\n    }\n\n    return xml;\n  };\n};","map":{"version":3,"sources":["C:/Users/thero/OneDrive/Documents/factory-management/factory-management/factory-managment-frontend/node_modules/rgbcolor/index.js"],"names":["module","exports","color_string","ok","alpha","charAt","substr","replace","toLowerCase","simple_colors","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dodgerblue","feldspar","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgrey","lightgreen","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslateblue","lightslategray","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","violetred","wheat","white","whitesmoke","yellow","yellowgreen","color_defs","re","example","process","bits","parseInt","parseFloat","i","length","processor","exec","channels","r","g","b","isNaN","toRGB","toRGBA","toHex","toString","getHelpXML","examples","Array","j","sc","xml","document","createElement","setAttribute","list_item","list_color","RGBColor","example_div","style","cssText","appendChild","createTextNode","list_item_value","e"],"mappings":"AAAA;AACA;AACA;AACA;AAEAA,MAAM,CAACC,OAAP,GAAiB,UAASC,YAAT,EAAuB;AACpC,OAAKC,EAAL,GAAU,KAAV;AACA,OAAKC,KAAL,GAAa,GAAb,CAFoC,CAIpC;;AACA,MAAIF,YAAY,CAACG,MAAb,CAAoB,CAApB,KAA0B,GAA9B,EAAmC;AAAE;AACjCH,IAAAA,YAAY,GAAGA,YAAY,CAACI,MAAb,CAAoB,CAApB,EAAsB,CAAtB,CAAf;AACH;;AAEDJ,EAAAA,YAAY,GAAGA,YAAY,CAACK,OAAb,CAAqB,IAArB,EAA0B,EAA1B,CAAf;AACAL,EAAAA,YAAY,GAAGA,YAAY,CAACM,WAAb,EAAf,CAVoC,CAYpC;AACA;;AACA,MAAIC,aAAa,GAAG;AAChBC,IAAAA,SAAS,EAAE,QADK;AAEhBC,IAAAA,YAAY,EAAE,QAFE;AAGhBC,IAAAA,IAAI,EAAE,QAHU;AAIhBC,IAAAA,UAAU,EAAE,QAJI;AAKhBC,IAAAA,KAAK,EAAE,QALS;AAMhBC,IAAAA,KAAK,EAAE,QANS;AAOhBC,IAAAA,MAAM,EAAE,QAPQ;AAQhBC,IAAAA,KAAK,EAAE,QARS;AAShBC,IAAAA,cAAc,EAAE,QATA;AAUhBC,IAAAA,IAAI,EAAE,QAVU;AAWhBC,IAAAA,UAAU,EAAE,QAXI;AAYhBC,IAAAA,KAAK,EAAE,QAZS;AAahBC,IAAAA,SAAS,EAAE,QAbK;AAchBC,IAAAA,SAAS,EAAE,QAdK;AAehBC,IAAAA,UAAU,EAAE,QAfI;AAgBhBC,IAAAA,SAAS,EAAE,QAhBK;AAiBhBC,IAAAA,KAAK,EAAE,QAjBS;AAkBhBC,IAAAA,cAAc,EAAE,QAlBA;AAmBhBC,IAAAA,QAAQ,EAAE,QAnBM;AAoBhBC,IAAAA,OAAO,EAAE,QApBO;AAqBhBC,IAAAA,IAAI,EAAE,QArBU;AAsBhBC,IAAAA,QAAQ,EAAE,QAtBM;AAuBhBC,IAAAA,QAAQ,EAAE,QAvBM;AAwBhBC,IAAAA,aAAa,EAAE,QAxBC;AAyBhBC,IAAAA,QAAQ,EAAE,QAzBM;AA0BhBC,IAAAA,SAAS,EAAE,QA1BK;AA2BhBC,IAAAA,SAAS,EAAE,QA3BK;AA4BhBC,IAAAA,WAAW,EAAE,QA5BG;AA6BhBC,IAAAA,cAAc,EAAE,QA7BA;AA8BhBC,IAAAA,UAAU,EAAE,QA9BI;AA+BhBC,IAAAA,UAAU,EAAE,QA/BI;AAgChBC,IAAAA,OAAO,EAAE,QAhCO;AAiChBC,IAAAA,UAAU,EAAE,QAjCI;AAkChBC,IAAAA,YAAY,EAAE,QAlCE;AAmChBC,IAAAA,aAAa,EAAE,QAnCC;AAoChBC,IAAAA,aAAa,EAAE,QApCC;AAqChBC,IAAAA,aAAa,EAAE,QArCC;AAsChBC,IAAAA,UAAU,EAAE,QAtCI;AAuChBC,IAAAA,QAAQ,EAAE,QAvCM;AAwChBC,IAAAA,WAAW,EAAE,QAxCG;AAyChBC,IAAAA,OAAO,EAAE,QAzCO;AA0ChBC,IAAAA,UAAU,EAAE,QA1CI;AA2ChBC,IAAAA,QAAQ,EAAE,QA3CM;AA4ChBC,IAAAA,SAAS,EAAE,QA5CK;AA6ChBC,IAAAA,WAAW,EAAE,QA7CG;AA8ChBC,IAAAA,WAAW,EAAE,QA9CG;AA+ChBC,IAAAA,OAAO,EAAE,QA/CO;AAgDhBC,IAAAA,SAAS,EAAE,QAhDK;AAiDhBC,IAAAA,UAAU,EAAE,QAjDI;AAkDhBC,IAAAA,IAAI,EAAE,QAlDU;AAmDhBC,IAAAA,SAAS,EAAE,QAnDK;AAoDhBC,IAAAA,IAAI,EAAE,QApDU;AAqDhBC,IAAAA,KAAK,EAAE,QArDS;AAsDhBC,IAAAA,WAAW,EAAE,QAtDG;AAuDhBC,IAAAA,QAAQ,EAAE,QAvDM;AAwDhBC,IAAAA,OAAO,EAAE,QAxDO;AAyDhBC,IAAAA,SAAS,EAAG,QAzDI;AA0DhBC,IAAAA,MAAM,EAAG,QA1DO;AA2DhBC,IAAAA,KAAK,EAAE,QA3DS;AA4DhBC,IAAAA,KAAK,EAAE,QA5DS;AA6DhBC,IAAAA,QAAQ,EAAE,QA7DM;AA8DhBC,IAAAA,aAAa,EAAE,QA9DC;AA+DhBC,IAAAA,SAAS,EAAE,QA/DK;AAgEhBC,IAAAA,YAAY,EAAE,QAhEE;AAiEhBC,IAAAA,SAAS,EAAE,QAjEK;AAkEhBC,IAAAA,UAAU,EAAE,QAlEI;AAmEhBC,IAAAA,SAAS,EAAE,QAnEK;AAoEhBC,IAAAA,oBAAoB,EAAE,QApEN;AAqEhBC,IAAAA,SAAS,EAAE,QArEK;AAsEhBC,IAAAA,UAAU,EAAE,QAtEI;AAuEhBC,IAAAA,SAAS,EAAE,QAvEK;AAwEhBC,IAAAA,WAAW,EAAE,QAxEG;AAyEhBC,IAAAA,aAAa,EAAE,QAzEC;AA0EhBC,IAAAA,YAAY,EAAE,QA1EE;AA2EhBC,IAAAA,cAAc,EAAE,QA3EA;AA4EhBC,IAAAA,cAAc,EAAE,QA5EA;AA6EhBC,IAAAA,cAAc,EAAE,QA7EA;AA8EhBC,IAAAA,WAAW,EAAE,QA9EG;AA+EhBC,IAAAA,IAAI,EAAE,QA/EU;AAgFhBC,IAAAA,SAAS,EAAE,QAhFK;AAiFhBC,IAAAA,KAAK,EAAE,QAjFS;AAkFhBC,IAAAA,OAAO,EAAE,QAlFO;AAmFhBC,IAAAA,MAAM,EAAE,QAnFQ;AAoFhBC,IAAAA,gBAAgB,EAAE,QApFF;AAqFhBC,IAAAA,UAAU,EAAE,QArFI;AAsFhBC,IAAAA,YAAY,EAAE,QAtFE;AAuFhBC,IAAAA,YAAY,EAAE,QAvFE;AAwFhBC,IAAAA,cAAc,EAAE,QAxFA;AAyFhBC,IAAAA,eAAe,EAAE,QAzFD;AA0FhBC,IAAAA,iBAAiB,EAAE,QA1FH;AA2FhBC,IAAAA,eAAe,EAAE,QA3FD;AA4FhBC,IAAAA,eAAe,EAAE,QA5FD;AA6FhBC,IAAAA,YAAY,EAAE,QA7FE;AA8FhBC,IAAAA,SAAS,EAAE,QA9FK;AA+FhBC,IAAAA,SAAS,EAAE,QA/FK;AAgGhBC,IAAAA,QAAQ,EAAE,QAhGM;AAiGhBC,IAAAA,WAAW,EAAE,QAjGG;AAkGhBC,IAAAA,IAAI,EAAE,QAlGU;AAmGhBC,IAAAA,OAAO,EAAE,QAnGO;AAoGhBC,IAAAA,KAAK,EAAE,QApGS;AAqGhBC,IAAAA,SAAS,EAAE,QArGK;AAsGhBC,IAAAA,MAAM,EAAE,QAtGQ;AAuGhBC,IAAAA,SAAS,EAAE,QAvGK;AAwGhBC,IAAAA,MAAM,EAAE,QAxGQ;AAyGhBC,IAAAA,aAAa,EAAE,QAzGC;AA0GhBC,IAAAA,SAAS,EAAE,QA1GK;AA2GhBC,IAAAA,aAAa,EAAE,QA3GC;AA4GhBC,IAAAA,aAAa,EAAE,QA5GC;AA6GhBC,IAAAA,UAAU,EAAE,QA7GI;AA8GhBC,IAAAA,SAAS,EAAE,QA9GK;AA+GhBC,IAAAA,IAAI,EAAE,QA/GU;AAgHhBC,IAAAA,IAAI,EAAE,QAhHU;AAiHhBC,IAAAA,IAAI,EAAE,QAjHU;AAkHhBC,IAAAA,UAAU,EAAE,QAlHI;AAmHhBC,IAAAA,MAAM,EAAE,QAnHQ;AAoHhBC,IAAAA,aAAa,EAAE,QApHC;AAqHhBC,IAAAA,GAAG,EAAE,QArHW;AAsHhBC,IAAAA,SAAS,EAAE,QAtHK;AAuHhBC,IAAAA,SAAS,EAAE,QAvHK;AAwHhBC,IAAAA,WAAW,EAAE,QAxHG;AAyHhBC,IAAAA,MAAM,EAAE,QAzHQ;AA0HhBC,IAAAA,UAAU,EAAE,QA1HI;AA2HhBC,IAAAA,QAAQ,EAAE,QA3HM;AA4HhBC,IAAAA,QAAQ,EAAE,QA5HM;AA6HhBC,IAAAA,MAAM,EAAE,QA7HQ;AA8HhBC,IAAAA,MAAM,EAAE,QA9HQ;AA+HhBC,IAAAA,OAAO,EAAE,QA/HO;AAgIhBC,IAAAA,SAAS,EAAE,QAhIK;AAiIhBC,IAAAA,SAAS,EAAE,QAjIK;AAkIhBC,IAAAA,IAAI,EAAE,QAlIU;AAmIhBC,IAAAA,WAAW,EAAE,QAnIG;AAoIhBC,IAAAA,SAAS,EAAE,QApIK;AAqIhBC,IAAAA,GAAG,EAAE,QArIW;AAsIhBC,IAAAA,IAAI,EAAE,QAtIU;AAuIhBC,IAAAA,OAAO,EAAE,QAvIO;AAwIhBC,IAAAA,MAAM,EAAE,QAxIQ;AAyIhBC,IAAAA,SAAS,EAAE,QAzIK;AA0IhBC,IAAAA,MAAM,EAAE,QA1IQ;AA2IhBC,IAAAA,SAAS,EAAE,QA3IK;AA4IhBC,IAAAA,KAAK,EAAE,QA5IS;AA6IhBC,IAAAA,KAAK,EAAE,QA7IS;AA8IhBC,IAAAA,UAAU,EAAE,QA9II;AA+IhBC,IAAAA,MAAM,EAAE,QA/IQ;AAgJhBC,IAAAA,WAAW,EAAE;AAhJG,GAApB;AAkJAvJ,EAAAA,YAAY,GAAGO,aAAa,CAACP,YAAD,CAAb,IAA+BA,YAA9C,CAhKoC,CAiKpC;AAEA;;AACA,MAAIwJ,UAAU,GAAG,CACb;AACIC,IAAAA,EAAE,EAAE,iEADR;AAEIC,IAAAA,OAAO,EAAE,CAAC,yBAAD,EAA4B,uBAA5B,CAFb;AAGIC,IAAAA,OAAO,EAAE,UAAUC,IAAV,EAAe;AACpB,aAAO,CACHC,QAAQ,CAACD,IAAI,CAAC,CAAD,CAAL,CADL,EAEHC,QAAQ,CAACD,IAAI,CAAC,CAAD,CAAL,CAFL,EAGHC,QAAQ,CAACD,IAAI,CAAC,CAAD,CAAL,CAHL,EAIHE,UAAU,CAACF,IAAI,CAAC,CAAD,CAAL,CAJP,CAAP;AAMH;AAVL,GADa,EAab;AACIH,IAAAA,EAAE,EAAE,8CADR;AAEIC,IAAAA,OAAO,EAAE,CAAC,mBAAD,EAAsB,kBAAtB,CAFb;AAGIC,IAAAA,OAAO,EAAE,UAAUC,IAAV,EAAe;AACpB,aAAO,CACHC,QAAQ,CAACD,IAAI,CAAC,CAAD,CAAL,CADL,EAEHC,QAAQ,CAACD,IAAI,CAAC,CAAD,CAAL,CAFL,EAGHC,QAAQ,CAACD,IAAI,CAAC,CAAD,CAAL,CAHL,CAAP;AAKH;AATL,GAba,EAwBb;AACIH,IAAAA,EAAE,EAAE,oDADR;AAEIC,IAAAA,OAAO,EAAE,CAAC,SAAD,EAAY,QAAZ,CAFb;AAGIC,IAAAA,OAAO,EAAE,UAAUC,IAAV,EAAe;AACpB,aAAO,CACHC,QAAQ,CAACD,IAAI,CAAC,CAAD,CAAL,EAAU,EAAV,CADL,EAEHC,QAAQ,CAACD,IAAI,CAAC,CAAD,CAAL,EAAU,EAAV,CAFL,EAGHC,QAAQ,CAACD,IAAI,CAAC,CAAD,CAAL,EAAU,EAAV,CAHL,CAAP;AAKH;AATL,GAxBa,EAmCb;AACIH,IAAAA,EAAE,EAAE,oDADR;AAEIC,IAAAA,OAAO,EAAE,CAAC,MAAD,EAAS,KAAT,CAFb;AAGIC,IAAAA,OAAO,EAAE,UAAUC,IAAV,EAAe;AACpB,aAAO,CACHC,QAAQ,CAACD,IAAI,CAAC,CAAD,CAAJ,GAAUA,IAAI,CAAC,CAAD,CAAf,EAAoB,EAApB,CADL,EAEHC,QAAQ,CAACD,IAAI,CAAC,CAAD,CAAJ,GAAUA,IAAI,CAAC,CAAD,CAAf,EAAoB,EAApB,CAFL,EAGHC,QAAQ,CAACD,IAAI,CAAC,CAAD,CAAJ,GAAUA,IAAI,CAAC,CAAD,CAAf,EAAoB,EAApB,CAHL,CAAP;AAKH;AATL,GAnCa,CAAjB,CApKoC,CAoNpC;;AACA,OAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,UAAU,CAACQ,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AACxC,QAAIN,EAAE,GAAGD,UAAU,CAACO,CAAD,CAAV,CAAcN,EAAvB;AACA,QAAIQ,SAAS,GAAGT,UAAU,CAACO,CAAD,CAAV,CAAcJ,OAA9B;AACA,QAAIC,IAAI,GAAGH,EAAE,CAACS,IAAH,CAAQlK,YAAR,CAAX;;AACA,QAAI4J,IAAJ,EAAU;AACN,UAAIO,QAAQ,GAAGF,SAAS,CAACL,IAAD,CAAxB;AACA,WAAKQ,CAAL,GAASD,QAAQ,CAAC,CAAD,CAAjB;AACA,WAAKE,CAAL,GAASF,QAAQ,CAAC,CAAD,CAAjB;AACA,WAAKG,CAAL,GAASH,QAAQ,CAAC,CAAD,CAAjB;;AACA,UAAIA,QAAQ,CAACH,MAAT,GAAkB,CAAtB,EAAyB;AACrB,aAAK9J,KAAL,GAAaiK,QAAQ,CAAC,CAAD,CAArB;AACH;;AACD,WAAKlK,EAAL,GAAU,IAAV;AACH;AAEJ,GApOmC,CAsOpC;;;AACA,OAAKmK,CAAL,GAAU,KAAKA,CAAL,GAAS,CAAT,IAAcG,KAAK,CAAC,KAAKH,CAAN,CAApB,GAAgC,CAAhC,GAAsC,KAAKA,CAAL,GAAS,GAAV,GAAiB,GAAjB,GAAuB,KAAKA,CAA1E;AACA,OAAKC,CAAL,GAAU,KAAKA,CAAL,GAAS,CAAT,IAAcE,KAAK,CAAC,KAAKF,CAAN,CAApB,GAAgC,CAAhC,GAAsC,KAAKA,CAAL,GAAS,GAAV,GAAiB,GAAjB,GAAuB,KAAKA,CAA1E;AACA,OAAKC,CAAL,GAAU,KAAKA,CAAL,GAAS,CAAT,IAAcC,KAAK,CAAC,KAAKD,CAAN,CAApB,GAAgC,CAAhC,GAAsC,KAAKA,CAAL,GAAS,GAAV,GAAiB,GAAjB,GAAuB,KAAKA,CAA1E;AACA,OAAKpK,KAAL,GAAc,KAAKA,KAAL,GAAa,CAAd,GAAmB,CAAnB,GAAyB,KAAKA,KAAL,GAAa,GAAb,IAAoBqK,KAAK,CAAC,KAAKrK,KAAN,CAA1B,GAA0C,GAA1C,GAAgD,KAAKA,KAA1F,CA1OoC,CA4OpC;;AACA,OAAKsK,KAAL,GAAa,YAAY;AACrB,WAAO,SAAS,KAAKJ,CAAd,GAAkB,IAAlB,GAAyB,KAAKC,CAA9B,GAAkC,IAAlC,GAAyC,KAAKC,CAA9C,GAAkD,GAAzD;AACH,GAFD;;AAGA,OAAKG,MAAL,GAAc,YAAY;AACtB,WAAO,UAAU,KAAKL,CAAf,GAAmB,IAAnB,GAA0B,KAAKC,CAA/B,GAAmC,IAAnC,GAA0C,KAAKC,CAA/C,GAAmD,IAAnD,GAA0D,KAAKpK,KAA/D,GAAuE,GAA9E;AACH,GAFD;;AAGA,OAAKwK,KAAL,GAAa,YAAY;AACrB,QAAIN,CAAC,GAAG,KAAKA,CAAL,CAAOO,QAAP,CAAgB,EAAhB,CAAR;AACA,QAAIN,CAAC,GAAG,KAAKA,CAAL,CAAOM,QAAP,CAAgB,EAAhB,CAAR;AACA,QAAIL,CAAC,GAAG,KAAKA,CAAL,CAAOK,QAAP,CAAgB,EAAhB,CAAR;AACA,QAAIP,CAAC,CAACJ,MAAF,IAAY,CAAhB,EAAmBI,CAAC,GAAG,MAAMA,CAAV;AACnB,QAAIC,CAAC,CAACL,MAAF,IAAY,CAAhB,EAAmBK,CAAC,GAAG,MAAMA,CAAV;AACnB,QAAIC,CAAC,CAACN,MAAF,IAAY,CAAhB,EAAmBM,CAAC,GAAG,MAAMA,CAAV;AACnB,WAAO,MAAMF,CAAN,GAAUC,CAAV,GAAcC,CAArB;AACH,GARD,CAnPoC,CA6PpC;;;AACA,OAAKM,UAAL,GAAkB,YAAY;AAE1B,QAAIC,QAAQ,GAAG,IAAIC,KAAJ,EAAf,CAF0B,CAG1B;;AACA,SAAK,IAAIf,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,UAAU,CAACQ,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AACxC,UAAIL,OAAO,GAAGF,UAAU,CAACO,CAAD,CAAV,CAAcL,OAA5B;;AACA,WAAK,IAAIqB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGrB,OAAO,CAACM,MAA5B,EAAoCe,CAAC,EAArC,EAAyC;AACrCF,QAAAA,QAAQ,CAACA,QAAQ,CAACb,MAAV,CAAR,GAA4BN,OAAO,CAACqB,CAAD,CAAnC;AACH;AACJ,KATyB,CAU1B;;;AACA,SAAK,IAAIC,EAAT,IAAezK,aAAf,EAA8B;AAC1BsK,MAAAA,QAAQ,CAACA,QAAQ,CAACb,MAAV,CAAR,GAA4BgB,EAA5B;AACH;;AAED,QAAIC,GAAG,GAAGC,QAAQ,CAACC,aAAT,CAAuB,IAAvB,CAAV;AACAF,IAAAA,GAAG,CAACG,YAAJ,CAAiB,IAAjB,EAAuB,mBAAvB;;AACA,SAAK,IAAIrB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGc,QAAQ,CAACb,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACtC,UAAI;AACA,YAAIsB,SAAS,GAAGH,QAAQ,CAACC,aAAT,CAAuB,IAAvB,CAAhB;AACA,YAAIG,UAAU,GAAG,IAAIC,QAAJ,CAAaV,QAAQ,CAACd,CAAD,CAArB,CAAjB;AACA,YAAIyB,WAAW,GAAGN,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAlB;AACAK,QAAAA,WAAW,CAACC,KAAZ,CAAkBC,OAAlB,GACQ,kBACE,2BADF,GAEE,aAFF,GAEkBJ,UAAU,CAACZ,KAAX,EAFlB,GAEuC,IAFvC,GAGE,QAHF,GAGaY,UAAU,CAACZ,KAAX,EAJrB;AAMAc,QAAAA,WAAW,CAACG,WAAZ,CAAwBT,QAAQ,CAACU,cAAT,CAAwB,MAAxB,CAAxB;AACA,YAAIC,eAAe,GAAGX,QAAQ,CAACU,cAAT,CAClB,MAAMf,QAAQ,CAACd,CAAD,CAAd,GAAoB,MAApB,GAA6BuB,UAAU,CAACd,KAAX,EAA7B,GAAkD,MAAlD,GAA2Dc,UAAU,CAACZ,KAAX,EADzC,CAAtB;AAGAW,QAAAA,SAAS,CAACM,WAAV,CAAsBH,WAAtB;AACAH,QAAAA,SAAS,CAACM,WAAV,CAAsBE,eAAtB;AACAZ,QAAAA,GAAG,CAACU,WAAJ,CAAgBN,SAAhB;AAEH,OAlBD,CAkBE,OAAMS,CAAN,EAAQ,CAAE;AACf;;AACD,WAAOb,GAAP;AAEH,GAxCD;AA0CH,CAxSD","sourcesContent":["/*\r\n\tBased on rgbcolor.js by Stoyan Stefanov <sstoo@gmail.com>\r\n\thttp://www.phpied.com/rgb-color-parser-in-javascript/\r\n*/\r\n\r\nmodule.exports = function(color_string) {\r\n    this.ok = false;\r\n    this.alpha = 1.0;\r\n\r\n    // strip any leading #\r\n    if (color_string.charAt(0) == '#') { // remove # if any\r\n        color_string = color_string.substr(1,6);\r\n    }\r\n\r\n    color_string = color_string.replace(/ /g,'');\r\n    color_string = color_string.toLowerCase();\r\n\r\n    // before getting into regexps, try simple matches\r\n    // and overwrite the input\r\n    var simple_colors = {\r\n        aliceblue: 'f0f8ff',\r\n        antiquewhite: 'faebd7',\r\n        aqua: '00ffff',\r\n        aquamarine: '7fffd4',\r\n        azure: 'f0ffff',\r\n        beige: 'f5f5dc',\r\n        bisque: 'ffe4c4',\r\n        black: '000000',\r\n        blanchedalmond: 'ffebcd',\r\n        blue: '0000ff',\r\n        blueviolet: '8a2be2',\r\n        brown: 'a52a2a',\r\n        burlywood: 'deb887',\r\n        cadetblue: '5f9ea0',\r\n        chartreuse: '7fff00',\r\n        chocolate: 'd2691e',\r\n        coral: 'ff7f50',\r\n        cornflowerblue: '6495ed',\r\n        cornsilk: 'fff8dc',\r\n        crimson: 'dc143c',\r\n        cyan: '00ffff',\r\n        darkblue: '00008b',\r\n        darkcyan: '008b8b',\r\n        darkgoldenrod: 'b8860b',\r\n        darkgray: 'a9a9a9',\r\n        darkgreen: '006400',\r\n        darkkhaki: 'bdb76b',\r\n        darkmagenta: '8b008b',\r\n        darkolivegreen: '556b2f',\r\n        darkorange: 'ff8c00',\r\n        darkorchid: '9932cc',\r\n        darkred: '8b0000',\r\n        darksalmon: 'e9967a',\r\n        darkseagreen: '8fbc8f',\r\n        darkslateblue: '483d8b',\r\n        darkslategray: '2f4f4f',\r\n        darkturquoise: '00ced1',\r\n        darkviolet: '9400d3',\r\n        deeppink: 'ff1493',\r\n        deepskyblue: '00bfff',\r\n        dimgray: '696969',\r\n        dodgerblue: '1e90ff',\r\n        feldspar: 'd19275',\r\n        firebrick: 'b22222',\r\n        floralwhite: 'fffaf0',\r\n        forestgreen: '228b22',\r\n        fuchsia: 'ff00ff',\r\n        gainsboro: 'dcdcdc',\r\n        ghostwhite: 'f8f8ff',\r\n        gold: 'ffd700',\r\n        goldenrod: 'daa520',\r\n        gray: '808080',\r\n        green: '008000',\r\n        greenyellow: 'adff2f',\r\n        honeydew: 'f0fff0',\r\n        hotpink: 'ff69b4',\r\n        indianred : 'cd5c5c',\r\n        indigo : '4b0082',\r\n        ivory: 'fffff0',\r\n        khaki: 'f0e68c',\r\n        lavender: 'e6e6fa',\r\n        lavenderblush: 'fff0f5',\r\n        lawngreen: '7cfc00',\r\n        lemonchiffon: 'fffacd',\r\n        lightblue: 'add8e6',\r\n        lightcoral: 'f08080',\r\n        lightcyan: 'e0ffff',\r\n        lightgoldenrodyellow: 'fafad2',\r\n        lightgrey: 'd3d3d3',\r\n        lightgreen: '90ee90',\r\n        lightpink: 'ffb6c1',\r\n        lightsalmon: 'ffa07a',\r\n        lightseagreen: '20b2aa',\r\n        lightskyblue: '87cefa',\r\n        lightslateblue: '8470ff',\r\n        lightslategray: '778899',\r\n        lightsteelblue: 'b0c4de',\r\n        lightyellow: 'ffffe0',\r\n        lime: '00ff00',\r\n        limegreen: '32cd32',\r\n        linen: 'faf0e6',\r\n        magenta: 'ff00ff',\r\n        maroon: '800000',\r\n        mediumaquamarine: '66cdaa',\r\n        mediumblue: '0000cd',\r\n        mediumorchid: 'ba55d3',\r\n        mediumpurple: '9370d8',\r\n        mediumseagreen: '3cb371',\r\n        mediumslateblue: '7b68ee',\r\n        mediumspringgreen: '00fa9a',\r\n        mediumturquoise: '48d1cc',\r\n        mediumvioletred: 'c71585',\r\n        midnightblue: '191970',\r\n        mintcream: 'f5fffa',\r\n        mistyrose: 'ffe4e1',\r\n        moccasin: 'ffe4b5',\r\n        navajowhite: 'ffdead',\r\n        navy: '000080',\r\n        oldlace: 'fdf5e6',\r\n        olive: '808000',\r\n        olivedrab: '6b8e23',\r\n        orange: 'ffa500',\r\n        orangered: 'ff4500',\r\n        orchid: 'da70d6',\r\n        palegoldenrod: 'eee8aa',\r\n        palegreen: '98fb98',\r\n        paleturquoise: 'afeeee',\r\n        palevioletred: 'd87093',\r\n        papayawhip: 'ffefd5',\r\n        peachpuff: 'ffdab9',\r\n        peru: 'cd853f',\r\n        pink: 'ffc0cb',\r\n        plum: 'dda0dd',\r\n        powderblue: 'b0e0e6',\r\n        purple: '800080',\r\n        rebeccapurple: '663399',\r\n        red: 'ff0000',\r\n        rosybrown: 'bc8f8f',\r\n        royalblue: '4169e1',\r\n        saddlebrown: '8b4513',\r\n        salmon: 'fa8072',\r\n        sandybrown: 'f4a460',\r\n        seagreen: '2e8b57',\r\n        seashell: 'fff5ee',\r\n        sienna: 'a0522d',\r\n        silver: 'c0c0c0',\r\n        skyblue: '87ceeb',\r\n        slateblue: '6a5acd',\r\n        slategray: '708090',\r\n        snow: 'fffafa',\r\n        springgreen: '00ff7f',\r\n        steelblue: '4682b4',\r\n        tan: 'd2b48c',\r\n        teal: '008080',\r\n        thistle: 'd8bfd8',\r\n        tomato: 'ff6347',\r\n        turquoise: '40e0d0',\r\n        violet: 'ee82ee',\r\n        violetred: 'd02090',\r\n        wheat: 'f5deb3',\r\n        white: 'ffffff',\r\n        whitesmoke: 'f5f5f5',\r\n        yellow: 'ffff00',\r\n        yellowgreen: '9acd32'\r\n    };\r\n    color_string = simple_colors[color_string] || color_string;\r\n    // emd of simple type-in colors\r\n\r\n    // array of color definition objects\r\n    var color_defs = [\r\n        {\r\n            re: /^rgba\\((\\d{1,3}),\\s*(\\d{1,3}),\\s*(\\d{1,3}),\\s*((?:\\d?\\.)?\\d)\\)$/,\r\n            example: ['rgba(123, 234, 45, 0.8)', 'rgba(255,234,245,1.0)'],\r\n            process: function (bits){\r\n                return [\r\n                    parseInt(bits[1]),\r\n                    parseInt(bits[2]),\r\n                    parseInt(bits[3]),\r\n                    parseFloat(bits[4])\r\n                ];\r\n            }\r\n        },\r\n        {\r\n            re: /^rgb\\((\\d{1,3}),\\s*(\\d{1,3}),\\s*(\\d{1,3})\\)$/,\r\n            example: ['rgb(123, 234, 45)', 'rgb(255,234,245)'],\r\n            process: function (bits){\r\n                return [\r\n                    parseInt(bits[1]),\r\n                    parseInt(bits[2]),\r\n                    parseInt(bits[3])\r\n                ];\r\n            }\r\n        },\r\n        {\r\n            re: /^([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\r\n            example: ['#00ff00', '336699'],\r\n            process: function (bits){\r\n                return [\r\n                    parseInt(bits[1], 16),\r\n                    parseInt(bits[2], 16),\r\n                    parseInt(bits[3], 16)\r\n                ];\r\n            }\r\n        },\r\n        {\r\n            re: /^([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\r\n            example: ['#fb0', 'f0f'],\r\n            process: function (bits){\r\n                return [\r\n                    parseInt(bits[1] + bits[1], 16),\r\n                    parseInt(bits[2] + bits[2], 16),\r\n                    parseInt(bits[3] + bits[3], 16)\r\n                ];\r\n            }\r\n        }\r\n    ];\r\n\r\n    // search through the definitions to find a match\r\n    for (var i = 0; i < color_defs.length; i++) {\r\n        var re = color_defs[i].re;\r\n        var processor = color_defs[i].process;\r\n        var bits = re.exec(color_string);\r\n        if (bits) {\r\n            var channels = processor(bits);\r\n            this.r = channels[0];\r\n            this.g = channels[1];\r\n            this.b = channels[2];\r\n            if (channels.length > 3) {\r\n                this.alpha = channels[3];\r\n            }\r\n            this.ok = true;\r\n        }\r\n\r\n    }\r\n\r\n    // validate/cleanup values\r\n    this.r = (this.r < 0 || isNaN(this.r)) ? 0 : ((this.r > 255) ? 255 : this.r);\r\n    this.g = (this.g < 0 || isNaN(this.g)) ? 0 : ((this.g > 255) ? 255 : this.g);\r\n    this.b = (this.b < 0 || isNaN(this.b)) ? 0 : ((this.b > 255) ? 255 : this.b);\r\n    this.alpha = (this.alpha < 0) ? 0 : ((this.alpha > 1.0 || isNaN(this.alpha)) ? 1.0 : this.alpha);\r\n\r\n    // some getters\r\n    this.toRGB = function () {\r\n        return 'rgb(' + this.r + ', ' + this.g + ', ' + this.b + ')';\r\n    }\r\n    this.toRGBA = function () {\r\n        return 'rgba(' + this.r + ', ' + this.g + ', ' + this.b + ', ' + this.alpha + ')';\r\n    }\r\n    this.toHex = function () {\r\n        var r = this.r.toString(16);\r\n        var g = this.g.toString(16);\r\n        var b = this.b.toString(16);\r\n        if (r.length == 1) r = '0' + r;\r\n        if (g.length == 1) g = '0' + g;\r\n        if (b.length == 1) b = '0' + b;\r\n        return '#' + r + g + b;\r\n    }\r\n\r\n    // help\r\n    this.getHelpXML = function () {\r\n\r\n        var examples = new Array();\r\n        // add regexps\r\n        for (var i = 0; i < color_defs.length; i++) {\r\n            var example = color_defs[i].example;\r\n            for (var j = 0; j < example.length; j++) {\r\n                examples[examples.length] = example[j];\r\n            }\r\n        }\r\n        // add type-in colors\r\n        for (var sc in simple_colors) {\r\n            examples[examples.length] = sc;\r\n        }\r\n\r\n        var xml = document.createElement('ul');\r\n        xml.setAttribute('id', 'rgbcolor-examples');\r\n        for (var i = 0; i < examples.length; i++) {\r\n            try {\r\n                var list_item = document.createElement('li');\r\n                var list_color = new RGBColor(examples[i]);\r\n                var example_div = document.createElement('div');\r\n                example_div.style.cssText =\r\n                        'margin: 3px; '\r\n                        + 'border: 1px solid black; '\r\n                        + 'background:' + list_color.toHex() + '; '\r\n                        + 'color:' + list_color.toHex()\r\n                ;\r\n                example_div.appendChild(document.createTextNode('test'));\r\n                var list_item_value = document.createTextNode(\r\n                    ' ' + examples[i] + ' -> ' + list_color.toRGB() + ' -> ' + list_color.toHex()\r\n                );\r\n                list_item.appendChild(example_div);\r\n                list_item.appendChild(list_item_value);\r\n                xml.appendChild(list_item);\r\n\r\n            } catch(e){}\r\n        }\r\n        return xml;\r\n\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"script"}