{"ast":null,"code":"import { ascending, bisect, quantile as threshold } from \"d3-array\";\nimport { slice } from \"./array\";\nexport default function quantile() {\n  var domain = [],\n      range = [],\n      thresholds = [];\n\n  function rescale() {\n    var i = 0,\n        n = Math.max(1, range.length);\n    thresholds = new Array(n - 1);\n\n    while (++i < n) thresholds[i - 1] = threshold(domain, i / n);\n\n    return scale;\n  }\n\n  function scale(x) {\n    if (!isNaN(x = +x)) return range[bisect(thresholds, x)];\n  }\n\n  scale.invertExtent = function (y) {\n    var i = range.indexOf(y);\n    return i < 0 ? [NaN, NaN] : [i > 0 ? thresholds[i - 1] : domain[0], i < thresholds.length ? thresholds[i] : domain[domain.length - 1]];\n  };\n\n  scale.domain = function (_) {\n    if (!arguments.length) return domain.slice();\n    domain = [];\n\n    for (var i = 0, n = _.length, d; i < n; ++i) if (d = _[i], d != null && !isNaN(d = +d)) domain.push(d);\n\n    domain.sort(ascending);\n    return rescale();\n  };\n\n  scale.range = function (_) {\n    return arguments.length ? (range = slice.call(_), rescale()) : range.slice();\n  };\n\n  scale.quantiles = function () {\n    return thresholds.slice();\n  };\n\n  scale.copy = function () {\n    return quantile().domain(domain).range(range);\n  };\n\n  return scale;\n}","map":{"version":3,"sources":["C:/Users/thero/OneDrive/Documents/factory-management/factory-management/factory-managment-frontend/node_modules/d3-scale/src/quantile.js"],"names":["ascending","bisect","quantile","threshold","slice","domain","range","thresholds","rescale","i","n","Math","max","length","Array","scale","x","isNaN","invertExtent","y","indexOf","NaN","_","arguments","d","push","sort","call","quantiles","copy"],"mappings":"AAAA,SAAQA,SAAR,EAAmBC,MAAnB,EAA2BC,QAAQ,IAAIC,SAAvC,QAAuD,UAAvD;AACA,SAAQC,KAAR,QAAoB,SAApB;AAEA,eAAe,SAASF,QAAT,GAAoB;AACjC,MAAIG,MAAM,GAAG,EAAb;AAAA,MACIC,KAAK,GAAG,EADZ;AAAA,MAEIC,UAAU,GAAG,EAFjB;;AAIA,WAASC,OAAT,GAAmB;AACjB,QAAIC,CAAC,GAAG,CAAR;AAAA,QAAWC,CAAC,GAAGC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYN,KAAK,CAACO,MAAlB,CAAf;AACAN,IAAAA,UAAU,GAAG,IAAIO,KAAJ,CAAUJ,CAAC,GAAG,CAAd,CAAb;;AACA,WAAO,EAAED,CAAF,GAAMC,CAAb,EAAgBH,UAAU,CAACE,CAAC,GAAG,CAAL,CAAV,GAAoBN,SAAS,CAACE,MAAD,EAASI,CAAC,GAAGC,CAAb,CAA7B;;AAChB,WAAOK,KAAP;AACD;;AAED,WAASA,KAAT,CAAeC,CAAf,EAAkB;AAChB,QAAI,CAACC,KAAK,CAACD,CAAC,GAAG,CAACA,CAAN,CAAV,EAAoB,OAAOV,KAAK,CAACL,MAAM,CAACM,UAAD,EAAaS,CAAb,CAAP,CAAZ;AACrB;;AAEDD,EAAAA,KAAK,CAACG,YAAN,GAAqB,UAASC,CAAT,EAAY;AAC/B,QAAIV,CAAC,GAAGH,KAAK,CAACc,OAAN,CAAcD,CAAd,CAAR;AACA,WAAOV,CAAC,GAAG,CAAJ,GAAQ,CAACY,GAAD,EAAMA,GAAN,CAAR,GAAqB,CAC1BZ,CAAC,GAAG,CAAJ,GAAQF,UAAU,CAACE,CAAC,GAAG,CAAL,CAAlB,GAA4BJ,MAAM,CAAC,CAAD,CADR,EAE1BI,CAAC,GAAGF,UAAU,CAACM,MAAf,GAAwBN,UAAU,CAACE,CAAD,CAAlC,GAAwCJ,MAAM,CAACA,MAAM,CAACQ,MAAP,GAAgB,CAAjB,CAFpB,CAA5B;AAID,GAND;;AAQAE,EAAAA,KAAK,CAACV,MAAN,GAAe,UAASiB,CAAT,EAAY;AACzB,QAAI,CAACC,SAAS,CAACV,MAAf,EAAuB,OAAOR,MAAM,CAACD,KAAP,EAAP;AACvBC,IAAAA,MAAM,GAAG,EAAT;;AACA,SAAK,IAAII,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGY,CAAC,CAACT,MAAjB,EAAyBW,CAA9B,EAAiCf,CAAC,GAAGC,CAArC,EAAwC,EAAED,CAA1C,EAA6C,IAAIe,CAAC,GAAGF,CAAC,CAACb,CAAD,CAAL,EAAUe,CAAC,IAAI,IAAL,IAAa,CAACP,KAAK,CAACO,CAAC,GAAG,CAACA,CAAN,CAAjC,EAA2CnB,MAAM,CAACoB,IAAP,CAAYD,CAAZ;;AACxFnB,IAAAA,MAAM,CAACqB,IAAP,CAAY1B,SAAZ;AACA,WAAOQ,OAAO,EAAd;AACD,GAND;;AAQAO,EAAAA,KAAK,CAACT,KAAN,GAAc,UAASgB,CAAT,EAAY;AACxB,WAAOC,SAAS,CAACV,MAAV,IAAoBP,KAAK,GAAGF,KAAK,CAACuB,IAAN,CAAWL,CAAX,CAAR,EAAuBd,OAAO,EAAlD,IAAwDF,KAAK,CAACF,KAAN,EAA/D;AACD,GAFD;;AAIAW,EAAAA,KAAK,CAACa,SAAN,GAAkB,YAAW;AAC3B,WAAOrB,UAAU,CAACH,KAAX,EAAP;AACD,GAFD;;AAIAW,EAAAA,KAAK,CAACc,IAAN,GAAa,YAAW;AACtB,WAAO3B,QAAQ,GACVG,MADE,CACKA,MADL,EAEFC,KAFE,CAEIA,KAFJ,CAAP;AAGD,GAJD;;AAMA,SAAOS,KAAP;AACD","sourcesContent":["import {ascending, bisect, quantile as threshold} from \"d3-array\";\nimport {slice} from \"./array\";\n\nexport default function quantile() {\n  var domain = [],\n      range = [],\n      thresholds = [];\n\n  function rescale() {\n    var i = 0, n = Math.max(1, range.length);\n    thresholds = new Array(n - 1);\n    while (++i < n) thresholds[i - 1] = threshold(domain, i / n);\n    return scale;\n  }\n\n  function scale(x) {\n    if (!isNaN(x = +x)) return range[bisect(thresholds, x)];\n  }\n\n  scale.invertExtent = function(y) {\n    var i = range.indexOf(y);\n    return i < 0 ? [NaN, NaN] : [\n      i > 0 ? thresholds[i - 1] : domain[0],\n      i < thresholds.length ? thresholds[i] : domain[domain.length - 1]\n    ];\n  };\n\n  scale.domain = function(_) {\n    if (!arguments.length) return domain.slice();\n    domain = [];\n    for (var i = 0, n = _.length, d; i < n; ++i) if (d = _[i], d != null && !isNaN(d = +d)) domain.push(d);\n    domain.sort(ascending);\n    return rescale();\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (range = slice.call(_), rescale()) : range.slice();\n  };\n\n  scale.quantiles = function() {\n    return thresholds.slice();\n  };\n\n  scale.copy = function() {\n    return quantile()\n        .domain(domain)\n        .range(range);\n  };\n\n  return scale;\n}\n"]},"metadata":{},"sourceType":"module"}