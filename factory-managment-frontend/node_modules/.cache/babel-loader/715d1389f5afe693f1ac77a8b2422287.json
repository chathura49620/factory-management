{"ast":null,"code":"import toDate from \"../toDate/index.js\";\nimport differenceInCalendarDays from \"../differenceInCalendarDays/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\"; // Like `compareAsc` but uses local time not UTC, which is needed\n// for accurate equality comparisons of UTC timestamps that end up\n// having the same representation in local time, e.g. one hour before\n// DST ends vs. the instant that DST ends.\n\nfunction compareLocalAsc(dateLeft, dateRight) {\n  var diff = dateLeft.getFullYear() - dateRight.getFullYear() || dateLeft.getMonth() - dateRight.getMonth() || dateLeft.getDate() - dateRight.getDate() || dateLeft.getHours() - dateRight.getHours() || dateLeft.getMinutes() - dateRight.getMinutes() || dateLeft.getSeconds() - dateRight.getSeconds() || dateLeft.getMilliseconds() - dateRight.getMilliseconds();\n\n  if (diff < 0) {\n    return -1;\n  } else if (diff > 0) {\n    return 1; // Return 0 if diff is 0; return NaN if diff is NaN\n  } else {\n    return diff;\n  }\n}\n/**\r\n * @name differenceInDays\r\n * @category Day Helpers\r\n * @summary Get the number of full days between the given dates.\r\n *\r\n * @description\r\n * Get the number of full day periods between two dates. Fractional days are\r\n * truncated towards zero.\r\n *\r\n * One \"full day\" is the distance between a local time in one day to the same\r\n * local time on the next or previous day. A full day can sometimes be less than\r\n * or more than 24 hours if a daylight savings change happens between two dates.\r\n *\r\n * To ignore DST and only measure exact 24-hour periods, use this instead:\r\n * `Math.floor(differenceInHours(dateLeft, dateRight)/24)|0`.\r\n *\r\n *\r\n * ### v2.0.0 breaking changes:\r\n *\r\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\r\n *\r\n * @param {Date|Number} dateLeft - the later date\r\n * @param {Date|Number} dateRight - the earlier date\r\n * @returns {Number} the number of full days according to the local timezone\r\n * @throws {TypeError} 2 arguments required\r\n *\r\n * @example\r\n * // How many full days are between\r\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\r\n * const result = differenceInDays(\r\n *   new Date(2012, 6, 2, 0, 0),\r\n *   new Date(2011, 6, 2, 23, 0)\r\n * )\r\n * //=> 365\r\n * // How many full days are between\r\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\r\n * const result = differenceInDays(\r\n *   new Date(2011, 6, 3, 0, 1),\r\n *   new Date(2011, 6, 2, 23, 59)\r\n * )\r\n * //=> 0\r\n * // How many full days are between\r\n * // 1 March 2020 0:00 and 1 June 2020 0:00 ?\r\n * // Note: because local time is used, the\r\n * // result will always be 92 days, even in\r\n * // time zones where DST starts and the\r\n * // period has only 92*24-1 hours.\r\n * const result = differenceInDays(\r\n *   new Date(2020, 5, 1),\r\n *   new Date(2020, 2, 1)\r\n * )\r\n//=> 92\r\n */\n\n\nexport default function differenceInDays(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var sign = compareLocalAsc(dateLeft, dateRight);\n  var difference = Math.abs(differenceInCalendarDays(dateLeft, dateRight));\n  dateLeft.setDate(dateLeft.getDate() - sign * difference); // Math.abs(diff in full days - diff in calendar days) === 1 if last calendar day is not full\n  // If so, result must be decreased by 1 in absolute value\n\n  var isLastDayNotFull = Number(compareLocalAsc(dateLeft, dateRight) === -sign);\n  var result = sign * (difference - isLastDayNotFull); // Prevent negative zero\n\n  return result === 0 ? 0 : result;\n}","map":{"version":3,"sources":["C:/Users/thero/OneDrive/Documents/factory-management/factory-management/factory-managment-frontend/node_modules/date-fns/esm/differenceInDays/index.js"],"names":["toDate","differenceInCalendarDays","requiredArgs","compareLocalAsc","dateLeft","dateRight","diff","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","differenceInDays","dirtyDateLeft","dirtyDateRight","arguments","sign","difference","Math","abs","setDate","isLastDayNotFull","Number","result"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,oBAAnB;AACA,OAAOC,wBAAP,MAAqC,sCAArC;AACA,OAAOC,YAAP,MAAyB,+BAAzB,C,CAA0D;AAC1D;AACA;AACA;;AAEA,SAASC,eAAT,CAAyBC,QAAzB,EAAmCC,SAAnC,EAA8C;AAC5C,MAAIC,IAAI,GAAGF,QAAQ,CAACG,WAAT,KAAyBF,SAAS,CAACE,WAAV,EAAzB,IAAoDH,QAAQ,CAACI,QAAT,KAAsBH,SAAS,CAACG,QAAV,EAA1E,IAAkGJ,QAAQ,CAACK,OAAT,KAAqBJ,SAAS,CAACI,OAAV,EAAvH,IAA8IL,QAAQ,CAACM,QAAT,KAAsBL,SAAS,CAACK,QAAV,EAApK,IAA4LN,QAAQ,CAACO,UAAT,KAAwBN,SAAS,CAACM,UAAV,EAApN,IAA8OP,QAAQ,CAACQ,UAAT,KAAwBP,SAAS,CAACO,UAAV,EAAtQ,IAAgSR,QAAQ,CAACS,eAAT,KAA6BR,SAAS,CAACQ,eAAV,EAAxU;;AAEA,MAAIP,IAAI,GAAG,CAAX,EAAc;AACZ,WAAO,CAAC,CAAR;AACD,GAFD,MAEO,IAAIA,IAAI,GAAG,CAAX,EAAc;AACnB,WAAO,CAAP,CADmB,CACT;AACX,GAFM,MAEA;AACL,WAAOA,IAAP;AACD;AACF;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,eAAe,SAASQ,gBAAT,CAA0BC,aAA1B,EAAyCC,cAAzC,EAAyD;AACtEd,EAAAA,YAAY,CAAC,CAAD,EAAIe,SAAJ,CAAZ;AACA,MAAIb,QAAQ,GAAGJ,MAAM,CAACe,aAAD,CAArB;AACA,MAAIV,SAAS,GAAGL,MAAM,CAACgB,cAAD,CAAtB;AACA,MAAIE,IAAI,GAAGf,eAAe,CAACC,QAAD,EAAWC,SAAX,CAA1B;AACA,MAAIc,UAAU,GAAGC,IAAI,CAACC,GAAL,CAASpB,wBAAwB,CAACG,QAAD,EAAWC,SAAX,CAAjC,CAAjB;AACAD,EAAAA,QAAQ,CAACkB,OAAT,CAAiBlB,QAAQ,CAACK,OAAT,KAAqBS,IAAI,GAAGC,UAA7C,EANsE,CAMZ;AAC1D;;AAEA,MAAII,gBAAgB,GAAGC,MAAM,CAACrB,eAAe,CAACC,QAAD,EAAWC,SAAX,CAAf,KAAyC,CAACa,IAA3C,CAA7B;AACA,MAAIO,MAAM,GAAGP,IAAI,IAAIC,UAAU,GAAGI,gBAAjB,CAAjB,CAVsE,CAUjB;;AAErD,SAAOE,MAAM,KAAK,CAAX,GAAe,CAAf,GAAmBA,MAA1B;AACD","sourcesContent":["import toDate from \"../toDate/index.js\";\r\nimport differenceInCalendarDays from \"../differenceInCalendarDays/index.js\";\r\nimport requiredArgs from \"../_lib/requiredArgs/index.js\"; // Like `compareAsc` but uses local time not UTC, which is needed\r\n// for accurate equality comparisons of UTC timestamps that end up\r\n// having the same representation in local time, e.g. one hour before\r\n// DST ends vs. the instant that DST ends.\r\n\r\nfunction compareLocalAsc(dateLeft, dateRight) {\r\n  var diff = dateLeft.getFullYear() - dateRight.getFullYear() || dateLeft.getMonth() - dateRight.getMonth() || dateLeft.getDate() - dateRight.getDate() || dateLeft.getHours() - dateRight.getHours() || dateLeft.getMinutes() - dateRight.getMinutes() || dateLeft.getSeconds() - dateRight.getSeconds() || dateLeft.getMilliseconds() - dateRight.getMilliseconds();\r\n\r\n  if (diff < 0) {\r\n    return -1;\r\n  } else if (diff > 0) {\r\n    return 1; // Return 0 if diff is 0; return NaN if diff is NaN\r\n  } else {\r\n    return diff;\r\n  }\r\n}\r\n/**\r\n * @name differenceInDays\r\n * @category Day Helpers\r\n * @summary Get the number of full days between the given dates.\r\n *\r\n * @description\r\n * Get the number of full day periods between two dates. Fractional days are\r\n * truncated towards zero.\r\n *\r\n * One \"full day\" is the distance between a local time in one day to the same\r\n * local time on the next or previous day. A full day can sometimes be less than\r\n * or more than 24 hours if a daylight savings change happens between two dates.\r\n *\r\n * To ignore DST and only measure exact 24-hour periods, use this instead:\r\n * `Math.floor(differenceInHours(dateLeft, dateRight)/24)|0`.\r\n *\r\n *\r\n * ### v2.0.0 breaking changes:\r\n *\r\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\r\n *\r\n * @param {Date|Number} dateLeft - the later date\r\n * @param {Date|Number} dateRight - the earlier date\r\n * @returns {Number} the number of full days according to the local timezone\r\n * @throws {TypeError} 2 arguments required\r\n *\r\n * @example\r\n * // How many full days are between\r\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\r\n * const result = differenceInDays(\r\n *   new Date(2012, 6, 2, 0, 0),\r\n *   new Date(2011, 6, 2, 23, 0)\r\n * )\r\n * //=> 365\r\n * // How many full days are between\r\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\r\n * const result = differenceInDays(\r\n *   new Date(2011, 6, 3, 0, 1),\r\n *   new Date(2011, 6, 2, 23, 59)\r\n * )\r\n * //=> 0\r\n * // How many full days are between\r\n * // 1 March 2020 0:00 and 1 June 2020 0:00 ?\r\n * // Note: because local time is used, the\r\n * // result will always be 92 days, even in\r\n * // time zones where DST starts and the\r\n * // period has only 92*24-1 hours.\r\n * const result = differenceInDays(\r\n *   new Date(2020, 5, 1),\r\n *   new Date(2020, 2, 1)\r\n * )\r\n//=> 92\r\n */\r\n\r\n\r\nexport default function differenceInDays(dirtyDateLeft, dirtyDateRight) {\r\n  requiredArgs(2, arguments);\r\n  var dateLeft = toDate(dirtyDateLeft);\r\n  var dateRight = toDate(dirtyDateRight);\r\n  var sign = compareLocalAsc(dateLeft, dateRight);\r\n  var difference = Math.abs(differenceInCalendarDays(dateLeft, dateRight));\r\n  dateLeft.setDate(dateLeft.getDate() - sign * difference); // Math.abs(diff in full days - diff in calendar days) === 1 if last calendar day is not full\r\n  // If so, result must be decreased by 1 in absolute value\r\n\r\n  var isLastDayNotFull = Number(compareLocalAsc(dateLeft, dateRight) === -sign);\r\n  var result = sign * (difference - isLastDayNotFull); // Prevent negative zero\r\n\r\n  return result === 0 ? 0 : result;\r\n}"]},"metadata":{},"sourceType":"module"}