{"ast":null,"code":"import jsPDF from \"jspdf\";\nimport \"jspdf-autotable\";\nimport { format } from \"date-fns\"; // define a generatePDF function that accepts a tickets argument\n\nconst generatePDF = tickets => {\n  // initialize jsPDF\n  const doc = new jsPDF(); // define the columns we want and their titles\n  //const tableColumn = [\"Id\", \"Title\", \"Issue\", \"Status\", \"Closed on\"];\n\n  const tableColumn = [\"Id\", \"Product Category\", \"Quntity\", \"Estimated Days\", \"Estimated Employees\", \"Status\"]; // define an empty array of rows\n\n  const tableRows = []; // for each ticket pass all its data into an array\n\n  tickets.forEach(ticket => {\n    const ticketData = [ticket.productId, ticket.productCategory, ticket.quantity, ticket.esDays, ticket.esEmployees, ticket.status // called date-fns to format the date on the ticket\n    ]; // push each tickcet's info into a row\n\n    tableRows.push(ticketData);\n  }); // startY is basically margin-top\n\n  doc.autoTable(tableColumn, tableRows, {\n    startY: 20\n  });\n  const date = Date().split(\" \"); // we use a date string to generate our filename.\n\n  const dateStr = date[0] + date[1] + date[2] + date[3] + date[4]; // ticket title. and margin-top + margin-left\n\n  doc.text(\"Factory Management System\", 5, 5); // ticket title. and margin-top + margin-left\n\n  doc.text(\"Production Rounds.\", 14, 15); // we define the name of our PDF file.\n\n  doc.save(`report_${dateStr}.pdf`);\n};\n\nexport default generatePDF;","map":{"version":3,"sources":["/home/prabath/Documents/SLiit Projects/factory-management/factory-managment-frontend/src/components/ProductionManager/util/reportGenerator.js"],"names":["jsPDF","format","generatePDF","tickets","doc","tableColumn","tableRows","forEach","ticket","ticketData","productId","productCategory","quantity","esDays","esEmployees","status","push","autoTable","startY","date","Date","split","dateStr","text","save"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,iBAAP;AACA,SAASC,MAAT,QAAuB,UAAvB,C,CAEA;;AACA,MAAMC,WAAW,GAAIC,OAAD,IAAa;AAC/B;AACA,QAAMC,GAAG,GAAG,IAAIJ,KAAJ,EAAZ,CAF+B,CAI/B;AACA;;AACA,QAAMK,WAAW,GAAG,CAClB,IADkB,EAElB,kBAFkB,EAGlB,SAHkB,EAIlB,gBAJkB,EAKlB,qBALkB,EAMlB,QANkB,CAApB,CAN+B,CAc/B;;AACA,QAAMC,SAAS,GAAG,EAAlB,CAf+B,CAiB/B;;AACAH,EAAAA,OAAO,CAACI,OAAR,CAAiBC,MAAD,IAAY;AAC1B,UAAMC,UAAU,GAAG,CACjBD,MAAM,CAACE,SADU,EAEjBF,MAAM,CAACG,eAFU,EAGjBH,MAAM,CAACI,QAHU,EAIjBJ,MAAM,CAACK,MAJU,EAKjBL,MAAM,CAACM,WALU,EAMjBN,MAAM,CAACO,MANU,CAQjB;AARiB,KAAnB,CAD0B,CAW1B;;AACAT,IAAAA,SAAS,CAACU,IAAV,CAAeP,UAAf;AACD,GAbD,EAlB+B,CAiC/B;;AACAL,EAAAA,GAAG,CAACa,SAAJ,CAAcZ,WAAd,EAA2BC,SAA3B,EAAsC;AAAEY,IAAAA,MAAM,EAAE;AAAV,GAAtC;AACA,QAAMC,IAAI,GAAGC,IAAI,GAAGC,KAAP,CAAa,GAAb,CAAb,CAnC+B,CAoC/B;;AACA,QAAMC,OAAO,GAAGH,IAAI,CAAC,CAAD,CAAJ,GAAUA,IAAI,CAAC,CAAD,CAAd,GAAoBA,IAAI,CAAC,CAAD,CAAxB,GAA8BA,IAAI,CAAC,CAAD,CAAlC,GAAwCA,IAAI,CAAC,CAAD,CAA5D,CArC+B,CAsC/B;;AACAf,EAAAA,GAAG,CAACmB,IAAJ,CAAS,2BAAT,EAAsC,CAAtC,EAAyC,CAAzC,EAvC+B,CAwC/B;;AACAnB,EAAAA,GAAG,CAACmB,IAAJ,CAAS,oBAAT,EAA+B,EAA/B,EAAmC,EAAnC,EAzC+B,CA0C/B;;AACAnB,EAAAA,GAAG,CAACoB,IAAJ,CAAU,UAASF,OAAQ,MAA3B;AACD,CA5CD;;AA8CA,eAAepB,WAAf","sourcesContent":["import jsPDF from \"jspdf\";\nimport \"jspdf-autotable\";\nimport { format } from \"date-fns\";\n\n// define a generatePDF function that accepts a tickets argument\nconst generatePDF = (tickets) => {\n  // initialize jsPDF\n  const doc = new jsPDF();\n\n  // define the columns we want and their titles\n  //const tableColumn = [\"Id\", \"Title\", \"Issue\", \"Status\", \"Closed on\"];\n  const tableColumn = [\n    \"Id\",\n    \"Product Category\",\n    \"Quntity\",\n    \"Estimated Days\",\n    \"Estimated Employees\",\n    \"Status\",\n  ];\n  // define an empty array of rows\n  const tableRows = [];\n\n  // for each ticket pass all its data into an array\n  tickets.forEach((ticket) => {\n    const ticketData = [\n      ticket.productId,\n      ticket.productCategory,\n      ticket.quantity,\n      ticket.esDays,\n      ticket.esEmployees,\n      ticket.status,\n\n      // called date-fns to format the date on the ticket\n    ];\n    // push each tickcet's info into a row\n    tableRows.push(ticketData);\n  });\n\n  // startY is basically margin-top\n  doc.autoTable(tableColumn, tableRows, { startY: 20 });\n  const date = Date().split(\" \");\n  // we use a date string to generate our filename.\n  const dateStr = date[0] + date[1] + date[2] + date[3] + date[4];\n  // ticket title. and margin-top + margin-left\n  doc.text(\"Factory Management System\", 5, 5);\n  // ticket title. and margin-top + margin-left\n  doc.text(\"Production Rounds.\", 14, 15);\n  // we define the name of our PDF file.\n  doc.save(`report_${dateStr}.pdf`);\n};\n\nexport default generatePDF;\n"]},"metadata":{},"sourceType":"module"}