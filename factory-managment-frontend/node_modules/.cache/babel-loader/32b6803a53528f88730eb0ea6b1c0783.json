{"ast":null,"code":"import getWeek from \"../getWeek/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\r\n * @name setWeek\r\n * @category Week Helpers\r\n * @summary Set the local week to the given date.\r\n *\r\n * @description\r\n * Set the local week to the given date, saving the weekday number.\r\n * The exact calculation depends on the values of\r\n * `options.weekStartsOn` (which is the index of the first day of the week)\r\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\r\n * the first week of the week-numbering year)\r\n *\r\n * Week numbering: https://en.wikipedia.org/wiki/Week#Week_numbering\r\n *\r\n * ### v2.0.0 breaking changes:\r\n *\r\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\r\n *\r\n * @param {Date|Number} date - the date to be changed\r\n * @param {Number} week - the week of the new date\r\n * @param {Object} [options] - an object with options.\r\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\r\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\r\n * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year\r\n * @returns {Date} the new date with the local week set\r\n * @throws {TypeError} 2 arguments required\r\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\r\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\r\n *\r\n * @example\r\n * // Set the 1st week to 2 January 2005 with default options:\r\n * var result = setWeek(new Date(2005, 0, 2), 1)\r\n * //=> Sun Dec 26 2004 00:00:00\r\n *\r\n * @example\r\n * // Set the 1st week to 2 January 2005,\r\n * // if Monday is the first day of the week,\r\n * // and the first week of the year always contains 4 January:\r\n * var result = setWeek(new Date(2005, 0, 2), 1, {\r\n *   weekStartsOn: 1,\r\n *   firstWeekContainsDate: 4\r\n * })\r\n * //=> Sun Jan 4 2004 00:00:00\r\n */\n\nexport default function setWeek(dirtyDate, dirtyWeek, options) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var week = toInteger(dirtyWeek);\n  var diff = getWeek(date, options) - week;\n  date.setDate(date.getDate() - diff * 7);\n  return date;\n}","map":{"version":3,"sources":["C:/Users/thero/OneDrive/Documents/factory-management/factory-management/factory-managment-frontend/node_modules/date-fns/esm/setWeek/index.js"],"names":["getWeek","toDate","toInteger","requiredArgs","setWeek","dirtyDate","dirtyWeek","options","arguments","date","week","diff","setDate","getDate"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,qBAApB;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,OAAOC,SAAP,MAAsB,4BAAtB;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,OAAT,CAAiBC,SAAjB,EAA4BC,SAA5B,EAAuCC,OAAvC,EAAgD;AAC7DJ,EAAAA,YAAY,CAAC,CAAD,EAAIK,SAAJ,CAAZ;AACA,MAAIC,IAAI,GAAGR,MAAM,CAACI,SAAD,CAAjB;AACA,MAAIK,IAAI,GAAGR,SAAS,CAACI,SAAD,CAApB;AACA,MAAIK,IAAI,GAAGX,OAAO,CAACS,IAAD,EAAOF,OAAP,CAAP,GAAyBG,IAApC;AACAD,EAAAA,IAAI,CAACG,OAAL,CAAaH,IAAI,CAACI,OAAL,KAAiBF,IAAI,GAAG,CAArC;AACA,SAAOF,IAAP;AACD","sourcesContent":["import getWeek from \"../getWeek/index.js\";\r\nimport toDate from \"../toDate/index.js\";\r\nimport toInteger from \"../_lib/toInteger/index.js\";\r\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\r\n\r\n/**\r\n * @name setWeek\r\n * @category Week Helpers\r\n * @summary Set the local week to the given date.\r\n *\r\n * @description\r\n * Set the local week to the given date, saving the weekday number.\r\n * The exact calculation depends on the values of\r\n * `options.weekStartsOn` (which is the index of the first day of the week)\r\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\r\n * the first week of the week-numbering year)\r\n *\r\n * Week numbering: https://en.wikipedia.org/wiki/Week#Week_numbering\r\n *\r\n * ### v2.0.0 breaking changes:\r\n *\r\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\r\n *\r\n * @param {Date|Number} date - the date to be changed\r\n * @param {Number} week - the week of the new date\r\n * @param {Object} [options] - an object with options.\r\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\r\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\r\n * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year\r\n * @returns {Date} the new date with the local week set\r\n * @throws {TypeError} 2 arguments required\r\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\r\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\r\n *\r\n * @example\r\n * // Set the 1st week to 2 January 2005 with default options:\r\n * var result = setWeek(new Date(2005, 0, 2), 1)\r\n * //=> Sun Dec 26 2004 00:00:00\r\n *\r\n * @example\r\n * // Set the 1st week to 2 January 2005,\r\n * // if Monday is the first day of the week,\r\n * // and the first week of the year always contains 4 January:\r\n * var result = setWeek(new Date(2005, 0, 2), 1, {\r\n *   weekStartsOn: 1,\r\n *   firstWeekContainsDate: 4\r\n * })\r\n * //=> Sun Jan 4 2004 00:00:00\r\n */\r\nexport default function setWeek(dirtyDate, dirtyWeek, options) {\r\n  requiredArgs(2, arguments);\r\n  var date = toDate(dirtyDate);\r\n  var week = toInteger(dirtyWeek);\r\n  var diff = getWeek(date, options) - week;\r\n  date.setDate(date.getDate() - diff * 7);\r\n  return date;\r\n}"]},"metadata":{},"sourceType":"module"}