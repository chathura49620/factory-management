{"ast":null,"code":"import { map } from \"d3-collection\";\nimport { slice } from \"./array\";\nexport var implicit = {\n  name: \"implicit\"\n};\nexport default function ordinal(range) {\n  var index = map(),\n      domain = [],\n      unknown = implicit;\n  range = range == null ? [] : slice.call(range);\n\n  function scale(d) {\n    var key = d + \"\",\n        i = index.get(key);\n\n    if (!i) {\n      if (unknown !== implicit) return unknown;\n      index.set(key, i = domain.push(d));\n    }\n\n    return range[(i - 1) % range.length];\n  }\n\n  scale.domain = function (_) {\n    if (!arguments.length) return domain.slice();\n    domain = [], index = map();\n    var i = -1,\n        n = _.length,\n        d,\n        key;\n\n    while (++i < n) if (!index.has(key = (d = _[i]) + \"\")) index.set(key, domain.push(d));\n\n    return scale;\n  };\n\n  scale.range = function (_) {\n    return arguments.length ? (range = slice.call(_), scale) : range.slice();\n  };\n\n  scale.unknown = function (_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  scale.copy = function () {\n    return ordinal().domain(domain).range(range).unknown(unknown);\n  };\n\n  return scale;\n}","map":{"version":3,"sources":["C:/Users/thero/OneDrive/Documents/factory-management/factory-management/factory-managment-frontend/node_modules/d3-scale/src/ordinal.js"],"names":["map","slice","implicit","name","ordinal","range","index","domain","unknown","call","scale","d","key","i","get","set","push","length","_","arguments","n","has","copy"],"mappings":"AAAA,SAAQA,GAAR,QAAkB,eAAlB;AACA,SAAQC,KAAR,QAAoB,SAApB;AAEA,OAAO,IAAIC,QAAQ,GAAG;AAACC,EAAAA,IAAI,EAAE;AAAP,CAAf;AAEP,eAAe,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AACrC,MAAIC,KAAK,GAAGN,GAAG,EAAf;AAAA,MACIO,MAAM,GAAG,EADb;AAAA,MAEIC,OAAO,GAAGN,QAFd;AAIAG,EAAAA,KAAK,GAAGA,KAAK,IAAI,IAAT,GAAgB,EAAhB,GAAqBJ,KAAK,CAACQ,IAAN,CAAWJ,KAAX,CAA7B;;AAEA,WAASK,KAAT,CAAeC,CAAf,EAAkB;AAChB,QAAIC,GAAG,GAAGD,CAAC,GAAG,EAAd;AAAA,QAAkBE,CAAC,GAAGP,KAAK,CAACQ,GAAN,CAAUF,GAAV,CAAtB;;AACA,QAAI,CAACC,CAAL,EAAQ;AACN,UAAIL,OAAO,KAAKN,QAAhB,EAA0B,OAAOM,OAAP;AAC1BF,MAAAA,KAAK,CAACS,GAAN,CAAUH,GAAV,EAAeC,CAAC,GAAGN,MAAM,CAACS,IAAP,CAAYL,CAAZ,CAAnB;AACD;;AACD,WAAON,KAAK,CAAC,CAACQ,CAAC,GAAG,CAAL,IAAUR,KAAK,CAACY,MAAjB,CAAZ;AACD;;AAEDP,EAAAA,KAAK,CAACH,MAAN,GAAe,UAASW,CAAT,EAAY;AACzB,QAAI,CAACC,SAAS,CAACF,MAAf,EAAuB,OAAOV,MAAM,CAACN,KAAP,EAAP;AACvBM,IAAAA,MAAM,GAAG,EAAT,EAAaD,KAAK,GAAGN,GAAG,EAAxB;AACA,QAAIa,CAAC,GAAG,CAAC,CAAT;AAAA,QAAYO,CAAC,GAAGF,CAAC,CAACD,MAAlB;AAAA,QAA0BN,CAA1B;AAAA,QAA6BC,GAA7B;;AACA,WAAO,EAAEC,CAAF,GAAMO,CAAb,EAAgB,IAAI,CAACd,KAAK,CAACe,GAAN,CAAUT,GAAG,GAAG,CAACD,CAAC,GAAGO,CAAC,CAACL,CAAD,CAAN,IAAa,EAA7B,CAAL,EAAuCP,KAAK,CAACS,GAAN,CAAUH,GAAV,EAAeL,MAAM,CAACS,IAAP,CAAYL,CAAZ,CAAf;;AACvD,WAAOD,KAAP;AACD,GAND;;AAQAA,EAAAA,KAAK,CAACL,KAAN,GAAc,UAASa,CAAT,EAAY;AACxB,WAAOC,SAAS,CAACF,MAAV,IAAoBZ,KAAK,GAAGJ,KAAK,CAACQ,IAAN,CAAWS,CAAX,CAAR,EAAuBR,KAA3C,IAAoDL,KAAK,CAACJ,KAAN,EAA3D;AACD,GAFD;;AAIAS,EAAAA,KAAK,CAACF,OAAN,GAAgB,UAASU,CAAT,EAAY;AAC1B,WAAOC,SAAS,CAACF,MAAV,IAAoBT,OAAO,GAAGU,CAAV,EAAaR,KAAjC,IAA0CF,OAAjD;AACD,GAFD;;AAIAE,EAAAA,KAAK,CAACY,IAAN,GAAa,YAAW;AACtB,WAAOlB,OAAO,GACTG,MADE,CACKA,MADL,EAEFF,KAFE,CAEIA,KAFJ,EAGFG,OAHE,CAGMA,OAHN,CAAP;AAID,GALD;;AAOA,SAAOE,KAAP;AACD","sourcesContent":["import {map} from \"d3-collection\";\r\nimport {slice} from \"./array\";\r\n\r\nexport var implicit = {name: \"implicit\"};\r\n\r\nexport default function ordinal(range) {\r\n  var index = map(),\r\n      domain = [],\r\n      unknown = implicit;\r\n\r\n  range = range == null ? [] : slice.call(range);\r\n\r\n  function scale(d) {\r\n    var key = d + \"\", i = index.get(key);\r\n    if (!i) {\r\n      if (unknown !== implicit) return unknown;\r\n      index.set(key, i = domain.push(d));\r\n    }\r\n    return range[(i - 1) % range.length];\r\n  }\r\n\r\n  scale.domain = function(_) {\r\n    if (!arguments.length) return domain.slice();\r\n    domain = [], index = map();\r\n    var i = -1, n = _.length, d, key;\r\n    while (++i < n) if (!index.has(key = (d = _[i]) + \"\")) index.set(key, domain.push(d));\r\n    return scale;\r\n  };\r\n\r\n  scale.range = function(_) {\r\n    return arguments.length ? (range = slice.call(_), scale) : range.slice();\r\n  };\r\n\r\n  scale.unknown = function(_) {\r\n    return arguments.length ? (unknown = _, scale) : unknown;\r\n  };\r\n\r\n  scale.copy = function() {\r\n    return ordinal()\r\n        .domain(domain)\r\n        .range(range)\r\n        .unknown(unknown);\r\n  };\r\n\r\n  return scale;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}