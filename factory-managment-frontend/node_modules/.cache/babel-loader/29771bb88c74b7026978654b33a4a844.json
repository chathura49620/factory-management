{"ast":null,"code":"import addHours from \"../addHours/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\r\n * @name eachHourOfInterval\r\n * @category Interval Helpers\r\n * @summary Return the array of hours within the specified time interval.\r\n *\r\n * @description\r\n * Return the array of hours within the specified time interval.\r\n *\r\n * @param {Interval} interval - the interval. See [Interval]{@link https://date-fns.org/docs/Interval}\r\n * @param {Object} [options] - an object with options.\r\n * @param {Number} [options.step=1] - the step to increment by. The value should be more than 1.\r\n * @returns {Date[]} the array with starts of hours from the hour of the interval start to the hour of the interval end\r\n * @throws {TypeError} 1 argument required\r\n * @throws {RangeError} `options.step` must be a number greater than 1\r\n * @throws {RangeError} The start of an interval cannot be after its end\r\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\r\n *\r\n * @example\r\n * // Each hour between 6 October 2014, 12:00 and 6 October 2014, 15:00\r\n * var result = eachHourOfInterval({\r\n *   start: new Date(2014, 9, 6, 12),\r\n *   end: new Date(2014, 9, 6, 15)\r\n * })\r\n * //=> [\r\n * //   Mon Oct 06 2014 12:00:00,\r\n * //   Mon Oct 06 2014 13:00:00,\r\n * //   Mon Oct 06 2014 14:00:00,\r\n * //   Mon Oct 06 2014 15:00:00\r\n * // ]\r\n */\n\nexport default function eachHourOfInterval(dirtyInterval, options) {\n  requiredArgs(1, arguments);\n  var interval = dirtyInterval || {};\n  var startDate = toDate(interval.start);\n  var endDate = toDate(interval.end);\n  var startTime = startDate.getTime();\n  var endTime = endDate.getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`\n\n  if (!(startTime <= endTime)) {\n    throw new RangeError('Invalid interval');\n  }\n\n  var dates = [];\n  var currentDate = startDate;\n  currentDate.setMinutes(0, 0, 0);\n  var step = options && 'step' in options ? Number(options.step) : 1;\n  if (step < 1 || isNaN(step)) throw new RangeError('`options.step` must be a number greater than 1');\n\n  while (currentDate.getTime() <= endTime) {\n    dates.push(toDate(currentDate));\n    currentDate = addHours(currentDate, step);\n  }\n\n  return dates;\n}","map":{"version":3,"sources":["C:/Users/thero/OneDrive/Documents/factory-management/factory-management/factory-managment-frontend/node_modules/date-fns/esm/eachHourOfInterval/index.js"],"names":["addHours","toDate","requiredArgs","eachHourOfInterval","dirtyInterval","options","arguments","interval","startDate","start","endDate","end","startTime","getTime","endTime","RangeError","dates","currentDate","setMinutes","step","Number","isNaN","push"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,sBAArB;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,kBAAT,CAA4BC,aAA5B,EAA2CC,OAA3C,EAAoD;AACjEH,EAAAA,YAAY,CAAC,CAAD,EAAII,SAAJ,CAAZ;AACA,MAAIC,QAAQ,GAAGH,aAAa,IAAI,EAAhC;AACA,MAAII,SAAS,GAAGP,MAAM,CAACM,QAAQ,CAACE,KAAV,CAAtB;AACA,MAAIC,OAAO,GAAGT,MAAM,CAACM,QAAQ,CAACI,GAAV,CAApB;AACA,MAAIC,SAAS,GAAGJ,SAAS,CAACK,OAAV,EAAhB;AACA,MAAIC,OAAO,GAAGJ,OAAO,CAACG,OAAR,EAAd,CANiE,CAMhC;;AAEjC,MAAI,EAAED,SAAS,IAAIE,OAAf,CAAJ,EAA6B;AAC3B,UAAM,IAAIC,UAAJ,CAAe,kBAAf,CAAN;AACD;;AAED,MAAIC,KAAK,GAAG,EAAZ;AACA,MAAIC,WAAW,GAAGT,SAAlB;AACAS,EAAAA,WAAW,CAACC,UAAZ,CAAuB,CAAvB,EAA0B,CAA1B,EAA6B,CAA7B;AACA,MAAIC,IAAI,GAAGd,OAAO,IAAI,UAAUA,OAArB,GAA+Be,MAAM,CAACf,OAAO,CAACc,IAAT,CAArC,GAAsD,CAAjE;AACA,MAAIA,IAAI,GAAG,CAAP,IAAYE,KAAK,CAACF,IAAD,CAArB,EAA6B,MAAM,IAAIJ,UAAJ,CAAe,gDAAf,CAAN;;AAE7B,SAAOE,WAAW,CAACJ,OAAZ,MAAyBC,OAAhC,EAAyC;AACvCE,IAAAA,KAAK,CAACM,IAAN,CAAWrB,MAAM,CAACgB,WAAD,CAAjB;AACAA,IAAAA,WAAW,GAAGjB,QAAQ,CAACiB,WAAD,EAAcE,IAAd,CAAtB;AACD;;AAED,SAAOH,KAAP;AACD","sourcesContent":["import addHours from \"../addHours/index.js\";\r\nimport toDate from \"../toDate/index.js\";\r\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\r\n\r\n/**\r\n * @name eachHourOfInterval\r\n * @category Interval Helpers\r\n * @summary Return the array of hours within the specified time interval.\r\n *\r\n * @description\r\n * Return the array of hours within the specified time interval.\r\n *\r\n * @param {Interval} interval - the interval. See [Interval]{@link https://date-fns.org/docs/Interval}\r\n * @param {Object} [options] - an object with options.\r\n * @param {Number} [options.step=1] - the step to increment by. The value should be more than 1.\r\n * @returns {Date[]} the array with starts of hours from the hour of the interval start to the hour of the interval end\r\n * @throws {TypeError} 1 argument required\r\n * @throws {RangeError} `options.step` must be a number greater than 1\r\n * @throws {RangeError} The start of an interval cannot be after its end\r\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\r\n *\r\n * @example\r\n * // Each hour between 6 October 2014, 12:00 and 6 October 2014, 15:00\r\n * var result = eachHourOfInterval({\r\n *   start: new Date(2014, 9, 6, 12),\r\n *   end: new Date(2014, 9, 6, 15)\r\n * })\r\n * //=> [\r\n * //   Mon Oct 06 2014 12:00:00,\r\n * //   Mon Oct 06 2014 13:00:00,\r\n * //   Mon Oct 06 2014 14:00:00,\r\n * //   Mon Oct 06 2014 15:00:00\r\n * // ]\r\n */\r\nexport default function eachHourOfInterval(dirtyInterval, options) {\r\n  requiredArgs(1, arguments);\r\n  var interval = dirtyInterval || {};\r\n  var startDate = toDate(interval.start);\r\n  var endDate = toDate(interval.end);\r\n  var startTime = startDate.getTime();\r\n  var endTime = endDate.getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`\r\n\r\n  if (!(startTime <= endTime)) {\r\n    throw new RangeError('Invalid interval');\r\n  }\r\n\r\n  var dates = [];\r\n  var currentDate = startDate;\r\n  currentDate.setMinutes(0, 0, 0);\r\n  var step = options && 'step' in options ? Number(options.step) : 1;\r\n  if (step < 1 || isNaN(step)) throw new RangeError('`options.step` must be a number greater than 1');\r\n\r\n  while (currentDate.getTime() <= endTime) {\r\n    dates.push(toDate(currentDate));\r\n    currentDate = addHours(currentDate, step);\r\n  }\r\n\r\n  return dates;\r\n}"]},"metadata":{},"sourceType":"module"}